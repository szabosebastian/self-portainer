{
  "swagger": "2.0",
  "info": {
    "description": "Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.\nExamples are available at https://documentation.portainer.io/api/api-examples/\nYou can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).\n\n# Authentication\n\nMost of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.\nPortainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request\nwith the **Bearer** authentication mechanism.\n\nExample:\n\n```\nBearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE\n```\n\n# Security\n\nEach API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).\n\nDifferent access policies are available:\n\n- Public access\n- Authenticated access\n- Restricted access\n- Administrator access\n\n### Public access\n\nNo authentication is required to access the environments(endpoints) with this access policy.\n\n### Authenticated access\n\nAuthentication is required to access the environments(endpoints) with this access policy.\n\n### Restricted access\n\nAuthentication is required to access the environments(endpoints) with this access policy.\nExtra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.\n\n### Administrator access\n\nAuthentication as well as an administrator role are required to access the environments(endpoints) with this access policy.\n\n# Execute Docker requests\n\nPortainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).\n\nInstead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.\n\nTo do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).\n\n# Private Registry\n\nUsing private registry, you will need to pass a based64 encoded JSON string ‘{\"registryId\":\\<registryID value\\>}’ inside the Request Header. The parameter name is \"X-Registry-Auth\".\n\\<registryID value\\> - The registry ID where the repository was created.\n\nExample:\n\n```\neyJyZWdpc3RyeUlkIjoxfQ==\n```\n\n**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).\n",
    "version": "2.21.4",
    "title": "PortainerCE API",
    "contact": {
      "email": "info@portainer.io"
    },
    "license": {
      "name": "zlib",
      "url": "https://github.com/portainer/portainer/blob/develop/LICENSE"
    }
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "auth",
      "description": "Authenticate against Portainer HTTP API"
    },
    {
      "name": "backup",
      "description": "Manage backups"
    },
    {
      "name": "custom_templates",
      "description": "Manage Custom Templates"
    },
    {
      "name": "docker",
      "description": "Manage Docker resources"
    },
    {
      "name": "edge",
      "description": "Manage Edge related environment(endpoint) settings"
    },
    {
      "name": "edge_groups",
      "description": "Manage Edge Groups"
    },
    {
      "name": "edge_jobs",
      "description": "Manage Edge Jobs"
    },
    {
      "name": "edge_stacks",
      "description": "Manage Edge Stacks"
    },
    {
      "name": "edge_templates",
      "description": "Manage Edge Templates"
    },
    {
      "name": "endpoint_groups",
      "description": "Manage environment(endpoint) groups"
    },
    {
      "name": "endpoints",
      "description": "Manage Docker environments(endpoints)"
    },
    {
      "name": "gitops",
      "description": "Operate git repository"
    },
    {
      "name": "helm",
      "description": "Manage Helm charts"
    },
    {
      "name": "intel",
      "description": "Manage Intel AMT settings"
    },
    {
      "name": "kubernetes",
      "description": "Manage Kubernetes cluster"
    },
    {
      "name": "ldap",
      "description": "Manage LDAP settings"
    },
    {
      "name": "motd",
      "description": "Fetch the message of the day"
    },
    {
      "name": "registries",
      "description": "Manage Docker registries"
    },
    {
      "name": "resource_controls",
      "description": "Manage access control on Docker resources"
    },
    {
      "name": "roles",
      "description": "Manage roles"
    },
    {
      "name": "settings",
      "description": "Manage Portainer settings"
    },
    {
      "name": "ssl",
      "description": "Manage ssl settings"
    },
    {
      "name": "stacks",
      "description": "Manage stacks"
    },
    {
      "name": "status",
      "description": "Information about the Portainer instance"
    },
    {
      "name": "system",
      "description": "Manage Portainer system"
    },
    {
      "name": "tags",
      "description": "Manage tags"
    },
    {
      "name": "team_memberships",
      "description": "Manage team memberships"
    },
    {
      "name": "teams",
      "description": "Manage teams"
    },
    {
      "name": "templates",
      "description": "Manage App Templates"
    },
    {
      "name": "upload",
      "description": "Upload files"
    },
    {
      "name": "users",
      "description": "Manage users"
    },
    {
      "name": "webhooks",
      "description": "Manage webhooks"
    },
    {
      "name": "websocket",
      "description": "Create exec sessions using websockets"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/auth": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Authenticate",
        "description": "**Access policy**: public\nUse this environment(endpoint) to authenticate against Portainer using a username and password.",
        "operationId": "AuthenticateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Credentials used for authentication",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth.authenticatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/auth.authenticateResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "422": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "**Access policy**: public",
        "operationId": "Logout",
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/oauth/validate": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Authenticate with OAuth",
        "description": "**Access policy**: public",
        "operationId": "ValidateOAuth",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "OAuth Credentials used for authentication",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth.oauthPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/auth.authenticateResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "422": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/backup": {
      "post": {
        "tags": [
          "backup"
        ],
        "summary": "Creates an archive with a system data snapshot that could be used to restore the system.",
        "description": "Creates an archive with a system data snapshot that could be used to restore the system.\n**Access policy**: admin",
        "operationId": "Backup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "An object contains the password to encrypt the backup with",
            "required": false,
            "schema": {
              "$ref": "#/definitions/backup.backupPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/custom_templates": {
      "get": {
        "tags": [
          "custom_templates"
        ],
        "summary": "List available custom templates",
        "description": "List available custom templates.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Template types",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "edge",
            "in": "query",
            "description": "Filter by edge templates",
            "required": false,
            "type": "boolean"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.CustomTemplate"
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "custom_templates"
        ],
        "summary": "Create a custom template",
        "description": "Create a custom template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateCreate",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "method",
            "in": "query",
            "description": "method for creating template",
            "required": true,
            "type": "string",
            "enum": [
              "string",
              "file",
              "repository"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "for body documentation see the relevant /custom_templates/{method} endpoint",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/custom_templates/{id}": {
      "get": {
        "tags": [
          "custom_templates"
        ],
        "summary": "Inspect a custom template",
        "description": "Retrieve details about a template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "custom_templates"
        ],
        "summary": "Update a template",
        "description": "Update a template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Template details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customtemplates.customTemplateUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access template"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "custom_templates"
        ],
        "summary": "Remove a template",
        "description": "Remove a template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Access denied to resource"
          },
          "404": {
            "description": "Template not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/custom_templates/{id}/file": {
      "get": {
        "tags": [
          "custom_templates"
        ],
        "summary": "Get Template stack file content.",
        "description": "Retrieve the content of the Stack file for the specified custom template\n**Access policy**: authenticated",
        "operationId": "CustomTemplateFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/customtemplates.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Custom template not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/custom_templates/{id}/git_fetch": {
      "put": {
        "tags": [
          "custom_templates"
        ],
        "summary": "Fetch the latest config file content based on custom template's git repository configuration",
        "description": "Retrieve details about a template created from git repository method.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateGitFetch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/customtemplates.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Custom template not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/custom_templates/create/file": {
      "post": {
        "tags": [
          "custom_templates"
        ],
        "summary": "Create a custom template",
        "description": "Create a custom template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateCreateFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Title",
            "in": "formData",
            "description": "Title of the template",
            "required": true,
            "type": "string"
          },
          {
            "name": "Description",
            "in": "formData",
            "description": "Description of the template",
            "required": true,
            "type": "string"
          },
          {
            "name": "Note",
            "in": "formData",
            "description": "A note that will be displayed in the UI. Supports HTML content",
            "required": true,
            "type": "string"
          },
          {
            "name": "Platform",
            "in": "formData",
            "description": "Platform associated to the template (1 - 'linux', 2 - 'windows')",
            "required": true,
            "type": "integer",
            "enum": [
              1,
              2
            ]
          },
          {
            "name": "Type",
            "in": "formData",
            "description": "Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)",
            "required": true,
            "type": "integer",
            "enum": [
              1,
              2,
              3
            ]
          },
          {
            "name": "File",
            "in": "formData",
            "description": "File",
            "required": true,
            "type": "file"
          },
          {
            "name": "Logo",
            "in": "formData",
            "description": "URL of the template's logo",
            "required": false,
            "type": "string"
          },
          {
            "name": "Variables",
            "in": "formData",
            "description": "A json array of variables definitions",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/custom_templates/create/repository": {
      "post": {
        "tags": [
          "custom_templates"
        ],
        "summary": "Create a custom template",
        "description": "Create a custom template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateCreateRepository",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Required when using method=repository",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customtemplates.customTemplateFromGitRepositoryPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/custom_templates/create/string": {
      "post": {
        "tags": [
          "custom_templates"
        ],
        "summary": "Create a custom template",
        "description": "Create a custom template.\n**Access policy**: authenticated",
        "operationId": "CustomTemplateCreateString",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customtemplates.customTemplateFromFileContentPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.CustomTemplate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/docker/{environmentId}/containers/{containerId}/gpus": {
      "get": {
        "tags": [
          "docker"
        ],
        "summary": "Fetch container gpus data",
        "description": "**Access policy**:",
        "operationId": "dockerContainerGpusInspect",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "containerId",
            "in": "path",
            "description": "Container identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/containers.containerGpusResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Environment or container not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/docker/{environmentId}/images": {
      "get": {
        "tags": [
          "docker"
        ],
        "summary": "Fetch images",
        "description": "**Access policy**:",
        "operationId": "dockerImagesList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "withUsage",
            "in": "query",
            "description": "Include image usage information",
            "required": false,
            "type": "boolean"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/images.ImageResponse"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/edge_groups": {
      "get": {
        "tags": [
          "edge_groups"
        ],
        "summary": "list EdgeGroups",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeGroupList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "EdgeGroups",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/edgegroups.decoratedEdgeGroup"
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "post": {
        "tags": [
          "edge_groups"
        ],
        "summary": "Create an EdgeGroup",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeGroupCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "EdgeGroup data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgegroups.edgeGroupCreatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_groups/{id}": {
      "get": {
        "tags": [
          "edge_groups"
        ],
        "summary": "Inspects an EdgeGroup",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeGroupInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeGroup Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "put": {
        "tags": [
          "edge_groups"
        ],
        "summary": "Updates an EdgeGroup",
        "description": "**Access policy**: administrator",
        "operationId": "EgeGroupUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeGroup Id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "EdgeGroup data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgegroups.edgeGroupUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "delete": {
        "tags": [
          "edge_groups"
        ],
        "summary": "Deletes an EdgeGroup",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeGroupDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeGroup Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "409": {
            "description": "Edge group is in use by an Edge stack or Edge job"
          },
          "500": {
            "description": "Server error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_jobs": {
      "get": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Fetch EdgeJobs list",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.EdgeJob"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "post": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Create an EdgeJob",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobCreate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "method",
            "in": "query",
            "description": "Creation Method",
            "required": true,
            "type": "string",
            "enum": [
              "file",
              "string"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "for body documentation see the relevant /edge_jobs/create/{method} endpoint",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_jobs/{id}": {
      "get": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Inspect an EdgeJob",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeJob Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeJob"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "post": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Update an EdgeJob",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeJob Id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "EdgeGroup data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgejobs.edgeJobUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeJob"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "delete": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Delete an EdgeJob",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeJob Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_jobs/{id}/file": {
      "get": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Fetch a file of an EdgeJob",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeJob Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/edgejobs.edgeJobFileResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_jobs/{id}/tasks": {
      "get": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Fetch the list of tasks on an EdgeJob",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobTasksList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeJob Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/edgejobs.taskContainer"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_jobs/{id}/tasks/{taskID}/logs": {
      "get": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Fetch the log for a specifc task on an EdgeJob",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobTaskLogsInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeJob Id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/edgejobs.fileResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "post": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Collect the log for a specifc task on an EdgeJob",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobTasksCollect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeJob Id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "delete": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Clear the log for a specifc task on an EdgeJob",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobTasksClear",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeJob Id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "Task Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_jobs/create/file": {
      "post": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Create an EdgeJob from a file",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobCreateFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "Content of the Stack file",
            "required": true,
            "type": "file"
          },
          {
            "name": "Name",
            "in": "formData",
            "description": "Name of the stack",
            "required": true,
            "type": "string"
          },
          {
            "name": "CronExpression",
            "in": "formData",
            "description": "A cron expression to schedule this job",
            "required": true,
            "type": "string"
          },
          {
            "name": "EdgeGroups",
            "in": "formData",
            "description": "JSON stringified array of Edge Groups ids",
            "required": true,
            "type": "string"
          },
          {
            "name": "Endpoints",
            "in": "formData",
            "description": "JSON stringified array of Environment ids",
            "required": true,
            "type": "string"
          },
          {
            "name": "Recurring",
            "in": "formData",
            "description": "If recurring",
            "required": false,
            "type": "boolean"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_jobs/create/string": {
      "post": {
        "tags": [
          "edge_jobs"
        ],
        "summary": "Create an EdgeJob from a text",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeJobCreateString",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "EdgeGroup data when method is string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgejobs.edgeJobCreateFromFileContentPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeGroup"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_stacks": {
      "get": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Fetches the list of EdgeStacks",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.EdgeStack"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "post": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Create an EdgeStack",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackCreate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "method",
            "in": "query",
            "description": "Creation Method",
            "required": true,
            "type": "string",
            "enum": [
              "file",
              "string",
              "repository"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "for body documentation see the relevant /edge_stacks/create/{method} endpoint",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_stacks/{id}": {
      "get": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Inspect an EdgeStack",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeStack Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "put": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Update an EdgeStack",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeStack Id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "EdgeStack data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgestacks.updateEdgeStackPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      },
      "delete": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Delete an EdgeStack",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeStack Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_stacks/{id}/file": {
      "get": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Fetches the stack file for an EdgeStack",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeStack Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/edgestacks.stackFileResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_stacks/{id}/status": {
      "put": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Update an EdgeStack status",
        "description": "Authorized only if the request is done by an Edge Environment(Endpoint)",
        "operationId": "EdgeStackStatusUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeStack Id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "EdgeStack status payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgestacks.updateStatusPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/edge_stacks/{id}/status/{environmentId}": {
      "delete": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Delete an EdgeStack status",
        "description": "Authorized only if the request is done by an Edge Environment(Endpoint)",
        "operationId": "EdgeStackStatusDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EdgeStack Id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/edge_stacks/create/file": {
      "post": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Create an EdgeStack from file",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackCreateFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "formData",
            "description": "Name of the stack",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Content of the Stack file",
            "required": true,
            "type": "file"
          },
          {
            "name": "EdgeGroups",
            "in": "formData",
            "description": "JSON stringified array of Edge Groups ids",
            "required": true,
            "type": "string"
          },
          {
            "name": "DeploymentType",
            "in": "formData",
            "description": "deploy type 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad'",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Registries",
            "in": "formData",
            "description": "JSON stringified array of Registry ids to use for this stack",
            "required": false,
            "type": "string"
          },
          {
            "name": "UseManifestNamespaces",
            "in": "formData",
            "description": "Uses the manifest's namespaces instead of the default one, relevant only for kube environments",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "PrePullImage",
            "in": "formData",
            "description": "Pre Pull image",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "RetryDeploy",
            "in": "formData",
            "description": "Retry deploy",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "dryrun",
            "in": "query",
            "description": "if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_stacks/create/repository": {
      "post": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Create an EdgeStack from a git repository",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackCreateRepository",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "stack config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgestacks.edgeStackFromGitRepositoryPayload"
            }
          },
          {
            "name": "dryrun",
            "in": "query",
            "description": "if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_stacks/create/string": {
      "post": {
        "tags": [
          "edge_stacks"
        ],
        "summary": "Create an EdgeStack from a text",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeStackCreateString",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "stack config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/edgestacks.edgeStackFromStringPayload"
            }
          },
          {
            "name": "dryrun",
            "in": "query",
            "description": "if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.EdgeStack"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          },
          "503": {
            "description": "Edge compute features are disabled"
          }
        }
      }
    },
    "/edge_templates": {
      "get": {
        "tags": [
          "edge_templates"
        ],
        "summary": "Fetches the list of Edge Templates",
        "description": "**Access policy**: administrator",
        "operationId": "EdgeTemplateList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.Template"
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/endpoint_groups": {
      "get": {
        "tags": [
          "endpoint_groups"
        ],
        "summary": "List Environment(Endpoint) groups",
        "description": "List all environment(endpoint) groups based on the current user authorizations. Will\nreturn all environment(endpoint) groups if using an administrator account otherwise it will\nonly return authorized environment(endpoint) groups.\n**Access policy**: restricted",
        "operationId": "EndpointGroupList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Environment(Endpoint) group",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.EndpointGroup"
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "endpoint_groups"
        ],
        "summary": "Create an Environment(Endpoint) Group",
        "description": "Create a new environment(endpoint) group.\n**Access policy**: administrator",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Environment(Endpoint) Group details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpointgroups.endpointGroupCreatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.EndpointGroup"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoint_groups/{id}": {
      "get": {
        "tags": [
          "endpoint_groups"
        ],
        "summary": "Inspect an Environment(Endpoint) group",
        "description": "Retrieve details abont an environment(endpoint) group.\n**Access policy**: administrator",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) group identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.EndpointGroup"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "endpoint_groups"
        ],
        "summary": "Update an environment(endpoint) group",
        "description": "Update an environment(endpoint) group.\n**Access policy**: administrator",
        "operationId": "EndpointGroupUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EndpointGroup identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "EndpointGroup details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpointgroups.endpointGroupUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.EndpointGroup"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "endpoint_groups"
        ],
        "summary": "Remove an environment(endpoint) group",
        "description": "Remove an environment(endpoint) group.\n**Access policy**: administrator",
        "operationId": "EndpointGroupDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EndpointGroup identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoint_groups/{id}/endpoints/{endpointId}": {
      "put": {
        "tags": [
          "endpoint_groups"
        ],
        "summary": "Add an environment(endpoint) to an environment(endpoint) group",
        "description": "Add an environment(endpoint) to an environment(endpoint) group\n**Access policy**: administrator",
        "operationId": "EndpointGroupAddEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EndpointGroup identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "endpointId",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "endpoint_groups"
        ],
        "summary": "Removes environment(endpoint) from an environment(endpoint) group",
        "description": "**Access policy**: administrator",
        "operationId": "EndpointGroupDeleteEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "EndpointGroup identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "endpointId",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "EndpointGroup not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints": {
      "get": {
        "tags": [
          "endpoints"
        ],
        "summary": "List environments(endpoints)",
        "description": "List all environments(endpoints) based on the current user authorizations. Will\nreturn all environments(endpoints) if using an administrator or team leader account otherwise it will\nonly return authorized environments(endpoints).\n**Access policy**: restricted",
        "operationId": "EndpointList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Start searching from",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this value",
            "required": false,
            "type": "integer"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sorted results by desc/asc",
            "required": false,
            "type": "integer"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search query",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "List environments(endpoints) of these groups",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "description": "List environments(endpoints) by this status",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "types",
            "in": "query",
            "description": "List environments(endpoints) of this type",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "tagIds",
            "in": "query",
            "description": "search environments(endpoints) with these tags (depends on tagsPartialMatch)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "tagsPartialMatch",
            "in": "query",
            "description": "If true, will return environment(endpoint) which has one of tagIds, if false (or missing) will return only environments(endpoints) that has all the tags",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "endpointIds",
            "in": "query",
            "description": "will return only these environments(endpoints)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "provisioned",
            "in": "query",
            "description": "If true, will return environment(endpoint) that were provisioned",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "agentVersions",
            "in": "query",
            "description": "will return only environments with on of these agent versions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "edgeAsync",
            "in": "query",
            "description": "if exists true show only edge async agents, false show only standard edge agents. if missing, will show both types (relevant only for edge agents)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "edgeDeviceUntrusted",
            "in": "query",
            "description": "if true, show only untrusted edge agents, if false show only trusted edge agents (relevant only for edge agents)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "edgeCheckInPassedSeconds",
            "in": "query",
            "description": "if bigger then zero, show only edge agents that checked-in in the last provided seconds (relevant only for edge agents)",
            "required": false,
            "type": "number"
          },
          {
            "name": "excludeSnapshots",
            "in": "query",
            "description": "if true, the snapshot data won't be retrieved",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "name",
            "in": "query",
            "description": "will return only environments(endpoints) with this name",
            "required": false,
            "type": "string"
          },
          {
            "name": "edgeStackStatus",
            "in": "query",
            "description": "only applied when edgeStackId exists. Filter the returned environments based on their deployment status in the stack (not the environment status!)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoints",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.Endpoint"
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "endpoints"
        ],
        "summary": "Create a new environment(endpoint)",
        "description": "Create a new environment(endpoint) that will be used to manage an environment(endpoint).\n**Access policy**: administrator",
        "operationId": "EndpointCreate",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "formData",
            "description": "Name that will be used to identify this environment(endpoint) (example: my-environment)",
            "required": true,
            "type": "string"
          },
          {
            "name": "EndpointCreationType",
            "in": "formData",
            "description": "Environment(Endpoint) type. Value must be one of: 1 (Local Docker environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent environment) or 5 (Local Kubernetes Environment)",
            "required": true,
            "type": "integer"
          },
          {
            "name": "URL",
            "in": "formData",
            "description": "URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine). Cannot be empty if EndpointCreationType is set to 4 (Edge agent environment)",
            "required": false,
            "type": "string"
          },
          {
            "name": "PublicURL",
            "in": "formData",
            "description": "URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375)",
            "required": false,
            "type": "string"
          },
          {
            "name": "GroupID",
            "in": "formData",
            "description": "Environment(Endpoint) group identifier. If not specified will default to 1 (unassigned).",
            "required": false,
            "type": "integer"
          },
          {
            "name": "TLS",
            "in": "formData",
            "description": "Require TLS to connect against this environment(endpoint). Must be true if EndpointCreationType is set to 2 (Agent environment)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "TLSSkipVerify",
            "in": "formData",
            "description": "Skip server verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "TLSSkipClientVerify",
            "in": "formData",
            "description": "Skip client verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "TLSCACertFile",
            "in": "formData",
            "description": "TLS CA certificate file",
            "required": false,
            "type": "file"
          },
          {
            "name": "TLSCertFile",
            "in": "formData",
            "description": "TLS client certificate file",
            "required": false,
            "type": "file"
          },
          {
            "name": "TLSKeyFile",
            "in": "formData",
            "description": "TLS client key file",
            "required": false,
            "type": "file"
          },
          {
            "name": "AzureApplicationID",
            "in": "formData",
            "description": "Azure application ID. Required if environment(endpoint) type is set to 3",
            "required": false,
            "type": "string"
          },
          {
            "name": "AzureTenantID",
            "in": "formData",
            "description": "Azure tenant ID. Required if environment(endpoint) type is set to 3",
            "required": false,
            "type": "string"
          },
          {
            "name": "AzureAuthenticationKey",
            "in": "formData",
            "description": "Azure authentication key. Required if environment(endpoint) type is set to 3",
            "required": false,
            "type": "string"
          },
          {
            "name": "TagIds",
            "in": "formData",
            "description": "List of tag identifiers to which this environment(endpoint) is associated",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "EdgeCheckinInterval",
            "in": "formData",
            "description": "The check in interval for edge agent (in seconds)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "EdgeTunnelServerAddress",
            "in": "formData",
            "description": "URL or IP address that will be used to establish a reverse tunnel",
            "required": true,
            "type": "string"
          },
          {
            "name": "Gpus",
            "in": "formData",
            "description": "List of GPUs - json stringified array of {name, value} structs",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Endpoint"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Name is not unique"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "endpoints"
        ],
        "summary": "Remove multiple environments",
        "description": "Remove multiple environments and optionally clean-up associated resources.\n**Access policy**: Administrator only.",
        "operationId": "EndpointDeleteBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of environments to delete, with optional deleteCluster flag to clean-up assocaited resources (cloud environments only)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.endpointDeleteBatchPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Environment(s) successfully deleted."
          },
          "207": {
            "description": "Partial success. Some environments were deleted successfully, while others failed.",
            "schema": {
              "$ref": "#/definitions/endpoints.endpointDeleteBatchPartialResponse"
            }
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "403": {
            "description": "Unauthorized access or operation not allowed."
          },
          "500": {
            "description": "Server error occurred while attempting to delete the specified environments."
          }
        }
      }
    },
    "/endpoints/{id}": {
      "get": {
        "tags": [
          "endpoints"
        ],
        "summary": "Inspect an environment(endpoint)",
        "description": "Retrieve details about an environment(endpoint).\n**Access policy**: restricted",
        "operationId": "EndpointInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Endpoint"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "endpoints"
        ],
        "summary": "Update an environment(endpoint)",
        "description": "Update an environment(endpoint).\n**Access policy**: authenticated",
        "operationId": "EndpointUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Environment(Endpoint) details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.endpointUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Endpoint"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "409": {
            "description": "Name is not unique"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "endpoints"
        ],
        "summary": "Remove an environment",
        "description": "Remove the environment associated to the specified identifier and optionally clean-up associated resources.\n**Access policy**: Administrator only.",
        "operationId": "EndpointDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": [],
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Environment successfully deleted."
          },
          "400": {
            "description": "Invalid request payload, such as missing required fields or fields not meeting validation criteria."
          },
          "403": {
            "description": "Unauthorized access or operation not allowed."
          },
          "404": {
            "description": "Unable to find the environment with the specified identifier inside the database."
          },
          "500": {
            "description": "Server error occurred while attempting to delete the environment."
          }
        }
      }
    },
    "/endpoints/{id}/association": {
      "put": {
        "tags": [
          "endpoints"
        ],
        "summary": "De-association an edge environment(endpoint)",
        "description": "De-association an edge environment(endpoint).\n**Access policy**: administrator",
        "operationId": "EndpointAssociationDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/docker/v2/browse/put": {
      "post": {
        "tags": [
          "endpoints"
        ],
        "summary": "Upload a file under a specific path on the file system of an environment (endpoint)",
        "description": "Use this environment(endpoint) to upload TLS files.\n**Access policy**: administrator",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "volumeID",
            "in": "query",
            "description": "Optional volume identifier to upload the file",
            "required": false,
            "type": "string"
          },
          {
            "name": "Path",
            "in": "formData",
            "description": "The destination path to upload the file to",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file to upload",
            "required": true,
            "type": "file"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/dockerhub/{registryId}": {
      "get": {
        "tags": [
          "endpoints"
        ],
        "summary": "fetch docker pull limits",
        "description": "get docker pull limits for a docker hub registry in the environment\n**Access policy**:",
        "operationId": "endpointDockerhubStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "endpoint ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "registryId",
            "in": "path",
            "description": "registry ID",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints.dockerhubStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "registry or endpoint not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/edge/jobs/{jobID}/logs": {
      "post": {
        "tags": [
          "edge",
          "endpoints"
        ],
        "summary": "Inspect an EdgeJob Log",
        "description": "**Access policy**: public",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "environment(endpoint) Id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "jobID",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/endpoints/{id}/edge/stacks/{stackId}": {
      "get": {
        "tags": [
          "edge",
          "endpoints",
          "edge_stacks"
        ],
        "summary": "Inspect an Edge Stack for an Environment(Endpoint)",
        "description": "**Access policy**: public",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "environment(endpoint) Id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "stackId",
            "in": "path",
            "description": "EdgeStack Id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/edge.StackPayload"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/endpoints/{id}/edge/status": {
      "get": {
        "tags": [
          "endpoints"
        ],
        "summary": "Get environment(endpoint) status",
        "description": "environment(endpoint) for edge agent to check status of environment(endpoint)\n**Access policy**: restricted only to Edge environments(endpoints)",
        "operationId": "EndpointEdgeStatusInspect",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpointedge.endpointEdgeStatusInspectResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access environment(endpoint)"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/forceupdateservice": {
      "put": {
        "tags": [
          "endpoints"
        ],
        "summary": "force update a docker service",
        "description": "force update a docker service\n**Access policy**: authenticated",
        "operationId": "endpointForceUpdateService",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "endpoint identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.forceUpdateServicePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/swarm.ServiceUpdateResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "endpoint not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/kubernetes/helm": {
      "get": {
        "tags": [
          "helm"
        ],
        "summary": "List Helm Releases",
        "description": "**Access policy**: authenticated",
        "operationId": "HelmList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "specify an optional namespace",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "specify an optional filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "selector",
            "in": "query",
            "description": "specify an optional selector",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/release.ReleaseElement"
              }
            }
          },
          "400": {
            "description": "Invalid environment(endpoint) identifier"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Environment(Endpoint) or ServiceAccount not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "helm"
        ],
        "summary": "Install Helm Chart",
        "description": "**Access policy**: authenticated",
        "operationId": "HelmInstall",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Chart details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/helm.installChartPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/release.Release"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Environment(Endpoint) or ServiceAccount not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/kubernetes/helm/{release}": {
      "delete": {
        "tags": [
          "helm"
        ],
        "summary": "Delete Helm Release",
        "description": "**Access policy**: authenticated",
        "operationId": "HelmDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "release",
            "in": "path",
            "description": "The name of the release/application to uninstall",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "An optional namespace",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid environment(endpoint) id or bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Environment(Endpoint) or ServiceAccount not found"
          },
          "500": {
            "description": "Server error or helm error"
          }
        }
      }
    },
    "/endpoints/{id}/kubernetes/helm/repositories": {
      "get": {
        "tags": [
          "helm"
        ],
        "summary": "List a users helm repositories",
        "description": "Inspect a user helm repositories.\n**Access policy**: authenticated",
        "operationId": "HelmUserRepositoriesListDeprecated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/helm.helmUserRepositoryResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "helm"
        ],
        "summary": "Create a user helm repository",
        "description": "Create a user helm repository.\n**Access policy**: authenticated",
        "operationId": "HelmUserRepositoryCreateDeprecated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Helm Repository",
            "required": true,
            "schema": {
              "$ref": "#/definitions/helm.addHelmRepoUrlPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.HelmUserRepository"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/registries": {
      "get": {
        "tags": [
          "endpoints"
        ],
        "summary": "List Registries on environment",
        "description": "List all registries based on the current user authorizations in current environment.\n**Access policy**: authenticated",
        "operationId": "endpointRegistriesList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "required if kubernetes environment, will show registries by namespace",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.Registry"
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/registries/{registryId}": {
      "put": {
        "tags": [
          "endpoints"
        ],
        "summary": "update registry access for environment",
        "description": "**Access policy**: authenticated",
        "operationId": "endpointRegistryAccess",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "registryId",
            "in": "path",
            "description": "Registry identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.registryAccessPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Endpoint not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/settings": {
      "put": {
        "tags": [
          "endpoints"
        ],
        "summary": "Update settings for an environment(endpoint)",
        "description": "Update settings for an environment(endpoint).\n**Access policy**: authenticated",
        "operationId": "EndpointSettingsUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Environment(Endpoint) details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.endpointSettingsUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Endpoint"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/{id}/snapshot": {
      "post": {
        "tags": [
          "endpoints"
        ],
        "summary": "Snapshots an environment(endpoint)",
        "description": "Snapshots an environment(endpoint)\n**Access policy**: administrator",
        "operationId": "EndpointSnapshot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/global-key": {
      "post": {
        "tags": [
          "endpoints"
        ],
        "summary": "Create or retrieve the endpoint for an EdgeID",
        "operationId": "EndpointCreateGlobalKey",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoints.endpointCreateGlobalKeyResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/relations": {
      "put": {
        "tags": [
          "endpoints"
        ],
        "summary": "Update relations for a list of environments",
        "description": "Update relations for a list of environments\nEdge groups, tags and environment group can be updated.\n\n**Access policy**: administrator",
        "operationId": "EndpointUpdateRelations",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Environment relations data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/endpoints.endpointUpdateRelationsPayload"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/endpoints/snapshot": {
      "post": {
        "tags": [
          "endpoints"
        ],
        "summary": "Snapshot all environments(endpoints)",
        "description": "Snapshot all environments(endpoints)\n**Access policy**: administrator",
        "operationId": "EndpointSnapshots",
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/fdo": {
      "post": {
        "tags": [
          "intel"
        ],
        "summary": "Enable Portainer's FDO capabilities",
        "description": "Enable Portainer's FDO capabilities\n**Access policy**: administrator",
        "operationId": "fdoConfigure",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "FDO Settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fdo.fdoConfigurePayload"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/fdo/configure/{guid}": {
      "post": {
        "tags": [
          "intel"
        ],
        "summary": "configures an FDO device",
        "description": "configures an FDO device\n**Access policy**: administrator",
        "operationId": "fdoConfigureDevice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Device Configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fdo.deviceConfigurePayload"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/fdo/list": {
      "get": {
        "tags": [
          "intel"
        ],
        "summary": "List all known FDO vouchers",
        "description": "List all known FDO vouchers\n**Access policy**: administrator",
        "operationId": "fdoListAll",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/fdo/profiles": {
      "get": {
        "tags": [
          "intel"
        ],
        "summary": "retrieves all FDO profiles",
        "description": "retrieves all FDO profiles\n**Access policy**: administrator",
        "operationId": "fdoProfileList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Bad gateway"
          }
        }
      },
      "post": {
        "tags": [
          "intel"
        ],
        "summary": "creates a new FDO Profile",
        "description": "creates a new FDO Profile\n**Access policy**: administrator",
        "operationId": "createProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Profile name already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/fdo/profiles/{id}": {
      "get": {
        "tags": [
          "intel"
        ],
        "summary": "retrieves a given FDO profile information and content",
        "description": "retrieves a given FDO profile information and content\n**Access policy**: administrator",
        "operationId": "fdoProfileInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FDO Profile identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "intel"
        ],
        "summary": "updates an existing FDO Profile",
        "description": "updates an existing FDO Profile\n**Access policy**: administrator",
        "operationId": "updateProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FDO Profile identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Profile name already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "intel"
        ],
        "summary": "deletes a FDO Profile",
        "description": "deletes a FDO Profile\n**Access policy**: administrator",
        "operationId": "deleteProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FDO Profile identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/fdo/profiles/{id}/duplicate": {
      "post": {
        "tags": [
          "intel"
        ],
        "summary": "duplicated an existing FDO Profile",
        "description": "duplicated an existing FDO Profile\n**Access policy**: administrator",
        "operationId": "duplicate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FDO Profile identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/fdo/register": {
      "post": {
        "tags": [
          "intel"
        ],
        "summary": "register an FDO device",
        "description": "register an FDO device\n**Access policy**: administrator",
        "operationId": "fdoRegisterDevice",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/gitops/repo/file/preview": {
      "post": {
        "tags": [
          "gitops"
        ],
        "summary": "preview the content of target file in the git repository",
        "description": "Retrieve the compose file content based on git repository configuration\n**Access policy**: authenticated",
        "operationId": "GitOperationRepoFilePreview",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Template details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/gitops.repositoryFilePreviewPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/gitops.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/ingresscontrollers": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get a list of ingress controllers",
        "description": "Get a list of ingress controllers for the given environment\n**Access policy**: authenticated",
        "operationId": "getKubernetesIngressControllers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "allowedOnly",
            "in": "query",
            "description": "Only return allowed ingress controllers",
            "required": false,
            "type": "boolean"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/kubernetes.K8sIngressController"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Update (block/unblock) ingress controllers",
        "description": "Update (block/unblock) ingress controllers\n**Access policy**: authenticated",
        "operationId": "updateKubernetesIngressControllers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Ingress controllers",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/kubernetes.K8sIngressController"
                }
              }
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/ingresses/delete": {
      "post": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Delete kubernetes ingresses",
        "description": "Delete kubernetes ingresses for the provided environment\n**Access policy**: authenticated",
        "operationId": "deleteKubernetesIngresses",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Ingress details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sIngressDeleteRequests"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/metrics/nodes": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get a list of nodes with their live metrics",
        "description": "Get a list of nodes with their live metrics\n**Access policy**: authenticated",
        "operationId": "getKubernetesMetricsForAllNodes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/v1beta1.NodeMetricsList"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/metrics/nodes/{name}": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get live metrics for a node",
        "description": "Get live metrics for a node\n**Access policy**: authenticated",
        "operationId": "getKubernetesMetricsForNode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Node identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/v1beta1.NodeMetrics"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/metrics/pods/{namespace}": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get a list of pods with their live metrics",
        "description": "Get a list of pods with their live metrics\n**Access policy**: authenticated",
        "operationId": "getKubernetesMetricsForAllPods",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/v1beta1.PodMetricsList"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/metrics/pods/{namespace}/{name}": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get live metrics for a pod",
        "description": "Get live metrics for a pod\n**Access policy**: authenticated",
        "operationId": "getKubernetesMetricsForPod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Pod identifier",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/v1beta1.PodMetrics"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/namespaces": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get a list of kubernetes namespaces",
        "description": "Get a list of all kubernetes namespaces in the cluster\n**Access policy**: authenticated",
        "operationId": "getKubernetesNamespaces",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/portainer.K8sNamespaceInfo"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Create a kubernetes namespace",
        "description": "Create a kubernetes namespace within the given environment\n**Access policy**: authenticated",
        "operationId": "createKubernetesNamespace",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Namespace configuration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sNamespaceDetails"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get kubernetes namespace details",
        "description": "Get kubernetes namespace details for the provided namespace within the given environment\n**Access policy**: authenticated",
        "operationId": "getKubernetesNamespace",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.K8sNamespaceInfo"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Updates a kubernetes namespace",
        "description": "Update a kubernetes namespace within the given environment\n**Access policy**: authenticated",
        "operationId": "updateKubernetesNamespace",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Namespace details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sNamespaceDetails"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Delete kubernetes namespace",
        "description": "Delete a kubernetes namespace within the given environment\n**Access policy**: authenticated",
        "operationId": "deleteKubernetesNamespace",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/configuration": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get ConfigMaps and Secrets",
        "description": "Get all ConfigMaps and Secrets for a given namespace\n**Access policy**: authenticated",
        "operationId": "getKubernetesConfigMapsAndSecrets",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/kubernetes.K8sConfigMapOrSecret"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/ingresscontrollers": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get a list ingress controllers by namespace",
        "description": "Get a list of ingress controllers for the given environment in the provided namespace\n**Access policy**: authenticated",
        "operationId": "getKubernetesIngressControllersByNamespace",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/kubernetes.K8sIngressController"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Update (block/unblock) ingress controllers by namespace",
        "description": "Update (block/unblock) ingress controllers by namespace for the provided environment\n**Access policy**: authenticated",
        "operationId": "updateKubernetesIngressControllersByNamespace",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Ingress controllers",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/kubernetes.K8sIngressController"
                }
              }
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/ingresses": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get kubernetes ingresses by namespace",
        "description": "Get kubernetes ingresses by namespace for the provided environment\n**Access policy**: authenticated",
        "operationId": "getKubernetesIngresses",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Ingress details",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/kubernetes.K8sIngressInfo"
              }
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Create a kubernetes ingress by namespace",
        "description": "Create a kubernetes ingress by namespace for the provided environment\n**Access policy**: authenticated",
        "operationId": "createKubernetesIngress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Ingress details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sIngressInfo"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Update kubernetes ingress rule",
        "description": "Update kubernetes ingress rule for the provided environment\n**Access policy**: authenticated",
        "operationId": "updateKubernetesIngress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Ingress details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sIngressInfo"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/services": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get a list of kubernetes services for a given namespace",
        "description": "Get a list of kubernetes services for a given namespace\n**Access policy**: authenticated",
        "operationId": "getKubernetesServices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          },
          {
            "name": "lookupapplications",
            "in": "query",
            "description": "Lookup applications associated with each service",
            "required": false,
            "type": "boolean"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/kubernetes.K8sServiceInfo"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Create a kubernetes service",
        "description": "Create a kubernetes service within a given namespace\n**Access policy**: authenticated",
        "operationId": "createKubernetesService",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Service definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sServiceInfo"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Update a kubernetes service",
        "description": "Update a kubernetes service within a given namespace\n**Access policy**: authenticated",
        "operationId": "updateKubernetesService",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Service definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sServiceInfo"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/namespaces/{namespace}/system": {
      "put": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Toggle the system state for a namespace",
        "description": "Toggle the system state for a namespace\n**Access policy**: administrator or environment(endpoint) admin",
        "operationId": "KubernetesNamespacesToggleSystem",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.namespacesToggleSystemPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/nodes_limits": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Get CPU and memory limits of all nodes within k8s cluster",
        "description": "Get CPU and memory limits of all nodes within k8s cluster\n**Access policy**: authenticated",
        "operationId": "GetKubernetesNodesLimits",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.K8sNodesLimits"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Environment(Endpoint) not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/rbac_enabled": {
      "get": {
        "tags": [
          "rbac_enabled"
        ],
        "summary": "Check if RBAC is enabled",
        "description": "Check if RBAC is enabled in the current Kubernetes cluster.\n**Access policy**: administrator",
        "operationId": "IsRBACEnabled",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/{id}/services/delete": {
      "post": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Delete kubernetes services",
        "description": "Delete the provided list of kubernetes services\n**Access policy**: authenticated",
        "operationId": "deleteKubernetesServices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment (Endpoint) identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "A map where the key is the namespace and the value is an array of services to delete",
            "required": true,
            "schema": {
              "$ref": "#/definitions/kubernetes.K8sServiceDeleteRequests"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/kubernetes/config": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "summary": "Generate a kubeconfig file enabling client communication with k8s api server",
        "description": "Generate a kubeconfig file enabling client communication with k8s api server\n**Access policy**: authenticated",
        "operationId": "GetKubernetesConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "will include only these environments(endpoints)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "excludeIds",
            "in": "query",
            "description": "will exclude these environments(endpoints)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Environment(Endpoint) or ServiceAccount not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/ldap/check": {
      "post": {
        "tags": [
          "ldap"
        ],
        "summary": "Test LDAP connectivity",
        "description": "Test LDAP connectivity using LDAP details\n**Access policy**: administrator",
        "operationId": "LDAPCheck",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ldap.checkPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/motd": {
      "get": {
        "tags": [
          "motd"
        ],
        "summary": "fetches the message of the day",
        "description": "**Access policy**: restricted",
        "operationId": "MOTD",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/motd.motdResponse"
            }
          }
        }
      }
    },
    "/open_amt": {
      "post": {
        "tags": [
          "intel"
        ],
        "summary": "Enable Portainer's OpenAMT capabilities",
        "description": "Enable Portainer's OpenAMT capabilities\n**Access policy**: administrator",
        "operationId": "OpenAMTConfigure",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "OpenAMT Settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openamt.openAMTConfigurePayload"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/open_amt/{id}/activate": {
      "post": {
        "tags": [
          "intel"
        ],
        "summary": "Activate OpenAMT device and associate to agent endpoint",
        "description": "Activate OpenAMT device and associate to agent endpoint\n**Access policy**: administrator",
        "operationId": "openAMTActivate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/open_amt/{id}/devices": {
      "get": {
        "tags": [
          "intel"
        ],
        "summary": "Fetch OpenAMT managed devices information for endpoint",
        "description": "Fetch OpenAMT managed devices information for endpoint\n**Access policy**: administrator",
        "operationId": "OpenAMTDevices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment(Endpoint) identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/open_amt/{id}/devices/{deviceId}/action": {
      "post": {
        "tags": [
          "intel"
        ],
        "summary": "Execute out of band action on an AMT managed device",
        "description": "Execute out of band action on an AMT managed device\n**Access policy**: administrator",
        "operationId": "DeviceAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Device identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Device Action",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openamt.deviceActionPayload"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/open_amt/{id}/devices_features/{deviceId}": {
      "post": {
        "tags": [
          "intel"
        ],
        "summary": "Enable features on an AMT managed device",
        "description": "Enable features on an AMT managed device\n**Access policy**: administrator",
        "operationId": "DeviceFeatures",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Device identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Device Features",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openamt.deviceFeaturesPayload"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/open_amt/{id}/info": {
      "get": {
        "tags": [
          "intel"
        ],
        "summary": "Request OpenAMT info from a node",
        "description": "Request OpenAMT info from a node\n**Access policy**: administrator",
        "operationId": "OpenAMTHostInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/registries": {
      "get": {
        "tags": [
          "registries"
        ],
        "summary": "List Registries",
        "description": "List all registries based on the current user authorizations.\nWill return all registries if using an administrator account otherwise it\nwill only return authorized registries.\n**Access policy**: restricted",
        "operationId": "RegistryList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.Registry"
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "registries"
        ],
        "summary": "Create a new registry",
        "description": "Create a new registry.\n**Access policy**: restricted",
        "operationId": "RegistryCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Registry details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registries.registryCreatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Registry"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Another registry with the same name or same URL & credentials already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/registries/{id}": {
      "get": {
        "tags": [
          "registries"
        ],
        "summary": "Inspect a registry",
        "description": "Retrieve details about a registry.\n**Access policy**: restricted",
        "operationId": "RegistryInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Registry identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Registry"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access registry"
          },
          "404": {
            "description": "Registry not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "registries"
        ],
        "summary": "Update a registry",
        "description": "Update a registry\n**Access policy**: restricted",
        "operationId": "RegistryUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Registry identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Registry details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registries.registryUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Registry"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Registry not found"
          },
          "409": {
            "description": "Another registry with the same name or same URL & credentials already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "registries"
        ],
        "summary": "Remove a registry",
        "description": "Remove a registry\n**Access policy**: restricted",
        "operationId": "RegistryDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Registry identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Registry not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/registries/{id}/configure": {
      "post": {
        "tags": [
          "registries"
        ],
        "summary": "Configures a registry",
        "description": "Configures a registry.\n**Access policy**: restricted",
        "operationId": "RegistryConfigure",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Registry identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Registry configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/registries.registryConfigurePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Registry not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/resource_controls": {
      "post": {
        "tags": [
          "resource_controls"
        ],
        "summary": "Create a new resource control",
        "description": "Create a new resource control to restrict access to a Docker resource.\n**Access policy**: administrator",
        "operationId": "ResourceControlCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Resource control details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resourcecontrols.resourceControlCreatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.ResourceControl"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "A resource control is already associated to this resource"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/resource_controls/{id}": {
      "put": {
        "tags": [
          "resource_controls"
        ],
        "summary": "Update a resource control",
        "description": "Update a resource control\n**Access policy**: authenticated",
        "operationId": "ResourceControlUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource control identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Resource control details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resourcecontrols.resourceControlUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.ResourceControl"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource control not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "resource_controls"
        ],
        "summary": "Remove a resource control",
        "description": "Remove a resource control.\n**Access policy**: administrator",
        "operationId": "ResourceControlDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource control identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Resource control not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/restore": {
      "post": {
        "tags": [
          "backup"
        ],
        "summary": "Triggers a system restore using provided backup file",
        "description": "Triggers a system restore using provided backup file\n**Access policy**: public",
        "operationId": "Restore",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "restorePayload",
            "description": "Restore request payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/backup.restorePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "List roles",
        "description": "List all roles available for use\n**Access policy**: administrator",
        "operationId": "RoleList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.Role"
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieve Portainer settings",
        "description": "Retrieve Portainer settings.\n**Access policy**: administrator",
        "operationId": "SettingsInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Settings"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Update Portainer settings",
        "description": "Update Portainer settings.\n**Access policy**: administrator",
        "operationId": "SettingsUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "New settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/settings.settingsUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Settings"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/settings/public": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Retrieve Portainer public settings",
        "description": "Retrieve public settings. Returns a small set of settings that are not reserved to administrators only.\n**Access policy**: public",
        "operationId": "SettingsPublic",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/settings.publicSettingsResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/ssl": {
      "get": {
        "tags": [
          "ssl"
        ],
        "summary": "Inspect the ssl settings",
        "description": "Retrieve the ssl settings.\n**Access policy**: administrator",
        "operationId": "SSLInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.SSLSettings"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "ssl"
        ],
        "summary": "Update the ssl settings",
        "description": "Update the ssl settings.\n**Access policy**: administrator",
        "operationId": "SSLUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SSL Settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssl.sslUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to access settings"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks": {
      "get": {
        "tags": [
          "stacks"
        ],
        "summary": "List stacks",
        "description": "List all stacks based on the current user authorizations.\nWill return all stacks if using an administrator account otherwise it\nwill only return the list of stacks the user have access to.\nLimited stacks will not be returned by this endpoint.\n**Access policy**: authenticated",
        "operationId": "StackList",
        "parameters": [
          {
            "name": "filters",
            "in": "query",
            "description": "Filters to process on the stack list. Encoded as JSON (a map[string]string). For example, {'SwarmID': 'jpofkc0i9uo9wtx1zesuk649w'} will only return stacks that are part of the specified Swarm cluster. Available filters: EndpointID, SwarmID.",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.Stack"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new stack",
        "description": "Deploy a new stack into a Docker environment(endpoint) specified via the environment(endpoint) identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreate",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Stack deployment type. Possible values: 1 (Swarm stack), 2 (Compose stack) or 3 (Kubernetes stack).",
            "required": true,
            "type": "integer",
            "enum": [
              1,
              2,
              3
            ]
          },
          {
            "name": "method",
            "in": "query",
            "description": "Stack deployment method. Possible values: file, string, repository or url.",
            "required": true,
            "type": "string",
            "enum": [
              "string",
              "file",
              "repository",
              "url"
            ]
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment(endpoint) that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "for body documentation see the relevant /stacks/create/{type}/{method} endpoint",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/{id}": {
      "get": {
        "tags": [
          "stacks"
        ],
        "summary": "Inspect a stack",
        "description": "Retrieve details about a stack.\n**Access policy**: restricted",
        "operationId": "StackInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Stack not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "stacks"
        ],
        "summary": "Update a stack",
        "description": "Update a stack, only for file based stacks.\n**Access policy**: authenticated",
        "operationId": "StackUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Stack details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.updateSwarmStackPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "stacks"
        ],
        "summary": "Remove a stack",
        "description": "Remove a stack.\n**Access policy**: restricted",
        "operationId": "StackDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "external",
            "in": "query",
            "description": "Set to true to delete an external stack. Only external Swarm stacks are supported",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/{id}/associate": {
      "put": {
        "tags": [
          "stacks"
        ],
        "summary": "Associate an orphaned stack to a new environment(endpoint)",
        "description": "**Access policy**: administrator",
        "operationId": "StackAssociate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "swarmId",
            "in": "query",
            "description": "Swarm identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "orphanedRunning",
            "in": "query",
            "description": "Indicates whether the stack is orphaned",
            "required": true,
            "type": "boolean"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Stack not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/{id}/file": {
      "get": {
        "tags": [
          "stacks"
        ],
        "summary": "Retrieve the content of the Stack file for the specified stack",
        "description": "Get Stack file content.\n**Access policy**: restricted",
        "operationId": "StackFileInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/stacks.stackFileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Stack not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/{id}/git": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Update a stack's Git configs",
        "description": "Update the Git settings in a stack, e.g., RepositoryReferenceName and AutoUpdate\n**Access policy**: authenticated",
        "operationId": "StackUpdateGit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.",
            "required": false,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Git configs for pull and redeploy a stack",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.stackGitUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/{id}/git/redeploy": {
      "put": {
        "tags": [
          "stacks"
        ],
        "summary": "Redeploy a stack",
        "description": "Pull and redeploy a stack via Git\n**Access policy**: authenticated",
        "operationId": "StackGitRedeploy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.",
            "required": false,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Git configs for pull and redeploy of a stack. **StackName** may only be populated for Kuberenetes stacks, and if specified with a blank string, it will be set to blank",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.stackGitRedployPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/{id}/migrate": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Migrate a stack to another environment(endpoint)",
        "description": "Migrate a stack from an environment(endpoint) to another environment(endpoint). It will re-create the stack inside the target environment(endpoint) before removing the original stack.\n**Access policy**: authenticated",
        "operationId": "StackMigrate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.",
            "required": false,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Stack migration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.stackMigratePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Stack not found"
          },
          "409": {
            "description": "A stack with the same name is already running on the target environment(endpoint)"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/{id}/start": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Starts a stopped Stack",
        "description": "Starts a stopped Stack.\n**Access policy**: authenticated",
        "operationId": "StackStart",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Stack name is not unique"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/{id}/stop": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Stops a stopped Stack",
        "description": "Stops a stopped Stack.\n**Access policy**: authenticated",
        "operationId": "StackStop",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/create/kubernetes/repository": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new kubernetes stack from a git repository",
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateKubernetesGit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "stack config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.kubernetesGitDeploymentPayload"
            }
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Stack name or webhook ID already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/create/kubernetes/string": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new kubernetes stack from a file",
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateKubernetesFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "stack config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.kubernetesStringDeploymentPayload"
            }
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/create/kubernetes/url": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new kubernetes stack from a url",
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateKubernetesUrl",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "stack config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.kubernetesManifestURLDeploymentPayload"
            }
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/create/standalone/file": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new compose stack from a file",
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerStandaloneFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "formData",
            "description": "Name of the stack",
            "required": true,
            "type": "string"
          },
          {
            "name": "Env",
            "in": "formData",
            "description": "Environment variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}].",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Stack file",
            "required": false,
            "type": "file"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/create/standalone/repository": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new compose stack from repository",
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerStandaloneRepository",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "stack config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.composeStackFromGitRepositoryPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Stack name or webhook ID already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/create/standalone/string": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new compose stack from a text",
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerStandaloneString",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "stack config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.composeStackFromFileContentPayload"
            }
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/create/swarm/file": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new swarm stack from a file",
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerSwarmFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "formData",
            "description": "Name of the stack",
            "required": false,
            "type": "string"
          },
          {
            "name": "SwarmID",
            "in": "formData",
            "description": "Swarm cluster identifier.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Env",
            "in": "formData",
            "description": "Environment variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}]. Optional",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Stack file",
            "required": false,
            "type": "file"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/create/swarm/repository": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new swarm stack from a git repository",
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerSwarmRepository",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "stack config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.swarmStackFromGitRepositoryPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Stack name or webhook ID already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/create/swarm/string": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Deploy a new swarm stack from a text",
        "description": "Deploy a new stack into a Docker environment specified via the environment identifier.\n**Access policy**: authenticated",
        "operationId": "StackCreateDockerSwarmString",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "stack config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stacks.swarmStackFromFileContentPayload"
            }
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Identifier of the environment that will be used to deploy the stack",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Stack"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/name/{name}": {
      "delete": {
        "tags": [
          "stacks"
        ],
        "summary": "Remove Kubernetes stacks by name",
        "description": "Remove a stack.\n**Access policy**: restricted",
        "operationId": "StackDeleteKubernetesByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Stack name",
            "required": true,
            "type": "string"
          },
          {
            "name": "external",
            "in": "query",
            "description": "Set to true to delete an external stack. Only external Swarm stacks are supported",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "endpointId",
            "in": "query",
            "description": "Environment identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/stacks/webhooks/{webhookID}": {
      "post": {
        "tags": [
          "stacks"
        ],
        "summary": "Webhook for triggering stack updates from git",
        "description": "**Access policy**: public",
        "operationId": "WebhookInvoke",
        "parameters": [
          {
            "name": "webhookID",
            "in": "path",
            "description": "Stack identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Autoupdate for the stack isn't available"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Check Portainer status",
        "description": "Deprecated: use the `/system/status` endpoint instead.\nRetrieve Portainer status\n**Access policy**: public",
        "operationId": "StatusInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.status"
            }
          }
        }
      }
    },
    "/status/nodes": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Retrieve the count of nodes",
        "description": "Deprecated: use the `/system/nodes` endpoint instead.\n**Access policy**: authenticated",
        "operationId": "statusNodesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.nodesCountResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/status/version": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Check for portainer updates",
        "description": "Deprecated: use the `/system/version` endpoint instead.\nCheck if portainer has an update available\n**Access policy**: authenticated",
        "operationId": "Version",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.versionResponse"
            }
          }
        }
      }
    },
    "/system/info": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Retrieve system info",
        "description": "**Access policy**: authenticated",
        "operationId": "systemInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.systemInfoResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/system/nodes": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Retrieve the count of nodes",
        "description": "**Access policy**: authenticated",
        "operationId": "systemNodesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.nodesCountResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/system/status": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Check Portainer status",
        "description": "Retrieve Portainer status\n**Access policy**: public",
        "operationId": "systemStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.status"
            }
          }
        }
      }
    },
    "/system/upgrade": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Upgrade Portainer to BE",
        "description": "Upgrade Portainer to BE\n**Access policy**: administrator",
        "operationId": "systemUpgrade",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.status"
            }
          }
        }
      }
    },
    "/system/version": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Check for portainer updates",
        "description": "Check if portainer has an update available\n**Access policy**: authenticated",
        "operationId": "systemVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/system.versionResponse"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "List tags",
        "description": "List tags.\n**Access policy**: authenticated",
        "operationId": "TagList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.Tag"
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "tags"
        ],
        "summary": "Create a new tag",
        "description": "Create a new tag.\n**Access policy**: administrator",
        "operationId": "TagCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Tag details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tags.tagCreatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Tag"
            }
          },
          "409": {
            "description": "This name is already associated to a tag"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tags/{id}": {
      "delete": {
        "tags": [
          "tags"
        ],
        "summary": "Remove a tag",
        "description": "Remove a tag.\n**Access policy**: administrator",
        "operationId": "TagDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Tag not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/team_memberships": {
      "get": {
        "tags": [
          "team_memberships"
        ],
        "summary": "List team memberships",
        "description": "List team memberships. Access is only available to administrators and team leaders.\n**Access policy**: administrator",
        "operationId": "TeamMembershipList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.TeamMembership"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "team_memberships"
        ],
        "summary": "Create a new team membership",
        "description": "Create a new team memberships. Access is only available to administrators leaders of the associated team.\n**Access policy**: administrator",
        "operationId": "TeamMembershipCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Team membership details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teammemberships.teamMembershipCreatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.TeamMembership"
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied to manage memberships"
          },
          "409": {
            "description": "Team membership already registered"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/team_memberships/{id}": {
      "put": {
        "tags": [
          "team_memberships"
        ],
        "summary": "Update a team membership",
        "description": "Update a team membership. Access is only available to administrators or leaders of the associated team.\n**Access policy**: administrator or leaders of the associated team",
        "operationId": "TeamMembershipUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team membership identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Team membership details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teammemberships.teamMembershipUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.TeamMembership"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "TeamMembership not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "team_memberships"
        ],
        "summary": "Remove a team membership",
        "description": "Remove a team membership. Access is only available to administrators leaders of the associated team.\n**Access policy**: administrator",
        "operationId": "TeamMembershipDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "TeamMembership identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "TeamMembership not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "List teams",
        "description": "List teams. For non-administrator users, will only list the teams they are member of.\n**Access policy**: restricted",
        "operationId": "TeamList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "onlyLedTeams",
            "in": "query",
            "description": "Only list teams that the user is leader of",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "environmentId",
            "in": "query",
            "description": "Identifier of the environment(endpoint) that will be used to filter the authorized teams",
            "required": false,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.Team"
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "teams"
        ],
        "summary": "Create a new team",
        "description": "Create a new team.\n**Access policy**: administrator",
        "operationId": "TeamCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teams.teamCreatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Team"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "A team with the same name already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Inspect a team",
        "description": "Retrieve details about a team. Access is only available for administrator and leaders of that team.\n**Access policy**: administrator",
        "operationId": "TeamInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Team"
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Team not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "teams"
        ],
        "summary": "Update a team",
        "description": "Update a team.\n**Access policy**: administrator",
        "operationId": "TeamUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Team details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teams.teamUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.Team"
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Team not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "teams"
        ],
        "summary": "Remove a team",
        "description": "Remove a team.\n**Access policy**: administrator",
        "operationId": "TeamDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Team not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/teams/{id}/memberships": {
      "get": {
        "tags": [
          "team_memberships"
        ],
        "summary": "List team memberships",
        "description": "List team memberships. Access is only available to administrators and team leaders.\n**Access policy**: restricted",
        "operationId": "TeamMemberships",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team Id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.TeamMembership"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "List available templates",
        "description": "List available templates.\n**Access policy**: authenticated",
        "operationId": "TemplateList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/templates.listResponse"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/templates/{id}/file": {
      "post": {
        "tags": [
          "templates"
        ],
        "summary": "Get a template's file",
        "description": "Get a template's file\n**Access policy**: authenticated",
        "operationId": "TemplateFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/templates.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/templates/file": {
      "post": {
        "tags": [
          "templates"
        ],
        "summary": "Get a template's file",
        "description": "Get a template's file\n**Access policy**: authenticated",
        "operationId": "TemplateFileOld",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "File details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/templates.filePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/templates.fileResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/templates/helm": {
      "get": {
        "tags": [
          "helm"
        ],
        "summary": "Search Helm Charts",
        "description": "**Access policy**: authenticated",
        "operationId": "HelmRepoSearch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "repo",
            "in": "query",
            "description": "Helm repository URL",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/templates/helm/{command}": {
      "get": {
        "tags": [
          "helm"
        ],
        "summary": "Show Helm Chart Information",
        "description": "**Access policy**: authenticated",
        "operationId": "HelmShow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "repo",
            "in": "query",
            "description": "Helm repository URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "chart",
            "in": "query",
            "description": "Chart name",
            "required": true,
            "type": "string"
          },
          {
            "name": "command",
            "in": "path",
            "description": "chart/values/readme",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Environment(Endpoint) or ServiceAccount not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/upload/tls/{certificate}": {
      "post": {
        "tags": [
          "upload"
        ],
        "summary": "Upload TLS files",
        "description": "Use this environment(endpoint) to upload TLS files.\n**Access policy**: administrator",
        "operationId": "UploadTLS",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "certificate",
            "in": "path",
            "description": "TLS file type. Valid values are 'ca', 'cert' or 'key'.",
            "required": true,
            "type": "string",
            "enum": [
              "ca",
              "cert",
              "key"
            ]
          },
          {
            "name": "folder",
            "in": "formData",
            "description": "Folder where the TLS file will be stored. Will be created if not existing",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file to upload",
            "required": true,
            "type": "file"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List users",
        "description": "List Portainer users.\nNon-administrator users will only be able to list other non-administrator user accounts.\nUser passwords are filtered out, and should never be accessible.\n**Access policy**: restricted",
        "operationId": "UserList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "environmentId",
            "in": "query",
            "description": "Identifier of the environment(endpoint) that will be used to filter the authorized users",
            "required": false,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.User"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "description": "Create a new Portainer user.\nOnly administrators can create users.\n**Access policy**: restricted",
        "operationId": "UserCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.userCreatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "409": {
            "description": "User already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Inspect a user",
        "description": "Retrieve details about a user.\nUser passwords are filtered out, and should never be accessible.\n**Access policy**: authenticated",
        "operationId": "UserInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update a user",
        "description": "Update user details. A regular user account can only update his details.\nA regular user account cannot change their username or role.\n**Access policy**: authenticated",
        "operationId": "UserUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.userUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Username already exist"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Remove a user",
        "description": "Remove a user.\n**Access policy**: administrator",
        "operationId": "UserDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/{id}/helm/repositories": {
      "get": {
        "tags": [
          "helm"
        ],
        "summary": "List a users helm repositories",
        "description": "Inspect a user helm repositories.\n**Access policy**: authenticated",
        "operationId": "HelmUserRepositoriesList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/users.helmUserRepositoryResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "helm"
        ],
        "summary": "Create a user helm repository",
        "description": "Create a user helm repository.\n**Access policy**: authenticated",
        "operationId": "HelmUserRepositoryCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Helm Repository",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.addHelmRepoUrlPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.HelmUserRepository"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/{id}/helm/repositories/{repositoryID}": {
      "delete": {
        "tags": [
          "helm"
        ],
        "summary": "Delete a users helm repositoryies",
        "description": "**Access policy**: authenticated",
        "operationId": "HelmUserRepositoryDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "repositoryID",
            "in": "path",
            "description": "Repository identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/{id}/memberships": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Inspect a user memberships",
        "description": "Inspect a user memberships.\n**Access policy**: restricted",
        "operationId": "UserMembershipsInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.TeamMembership"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/{id}/passwd": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update password for a user",
        "description": "Update password for the specified user.\n**Access policy**: authenticated",
        "operationId": "UserUpdatePassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.userUpdatePasswordPayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/{id}/tokens": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all API keys for a user",
        "description": "Gets all API keys for a user.\nOnly the calling user or admin can retrieve api-keys.\n**Access policy**: authenticated",
        "operationId": "UserGetAPIKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.APIKey"
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Generate an API key for a user",
        "description": "Generates an API key for a user.\nOnly the calling user can generate a token for themselves.\nPassword is required only for internal authentication.\n**Access policy**: restricted",
        "operationId": "UserGenerateAPIKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.userAccessTokenCreatePayload"
            }
          }
        ],
        "security": [
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/users.accessTokenResponse"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/{id}/tokens/{keyID}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Remove an api-key associated to a user",
        "description": "Remove an api-key associated to a user..\nOnly the calling user or admin can remove api-key.\n**Access policy**: authenticated",
        "operationId": "UserRemoveAPIKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "keyID",
            "in": "path",
            "description": "Api Key identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/admin/check": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Check administrator account existence",
        "description": "Check if an administrator account exists in the database.\n**Access policy**: public",
        "operationId": "UserAdminCheck",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/admin/init": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Initialize administrator account",
        "description": "Initialize the 'admin' user account.\n**Access policy**: public",
        "operationId": "UserAdminInit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users.adminInitPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "Admin user already initialized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Inspect the current user user",
        "description": "Retrieve details about the current  user.\nUser passwords are filtered out, and should never be accessible.\n**Access policy**: authenticated",
        "operationId": "CurrentUserInspect",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/portainer.User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "List webhooks",
        "description": "**Access policy**: authenticated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filters",
            "in": "query",
            "description": "Filters (json-string)",
            "required": false,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/portainer.Webhook"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Create a webhook",
        "description": "**Access policy**: authenticated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Webhook data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/webhooks.webhookCreatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Webhook"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "409": {
            "description": "A webhook for this resource already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Execute a webhook",
        "description": "Acts on a passed in token UUID to restart the docker service\n**Access policy**: public",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Webhook executed"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "webhooks"
        ],
        "summary": "Update a webhook",
        "description": "**Access policy**: authenticated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Webhook data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/webhooks.webhookUpdatePayload"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/portainer.Webhook"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "**Access policy**: authenticated",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook id",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "202": {
            "description": "Webhook deleted"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/websocket/attach": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "Attach a websocket",
        "description": "If the nodeName query parameter is present, the request will be proxied to the underlying agent environment(endpoint).\nIf the nodeName query parameter is not specified, the request will be upgraded to the websocket protocol and\nan AttachStart operation HTTP request will be created and hijacked.\n**Access policy**: authenticated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "query",
            "description": "environment(endpoint) ID of the environment(endpoint) where the resource is located",
            "required": true,
            "type": "integer"
          },
          {
            "name": "nodeName",
            "in": "query",
            "description": "node name",
            "required": false,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "description": "JWT token used for authentication against this environment(endpoint)",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/websocket/exec": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "Execute a websocket",
        "description": "If the nodeName query parameter is present, the request will be proxied to the underlying agent environment(endpoint).\nIf the nodeName query parameter is not specified, the request will be upgraded to the websocket protocol and\nan ExecStart operation HTTP request will be created and hijacked.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "query",
            "description": "environment(endpoint) ID of the environment(endpoint) where the resource is located",
            "required": true,
            "type": "integer"
          },
          {
            "name": "nodeName",
            "in": "query",
            "description": "node name",
            "required": false,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "description": "JWT token used for authentication against this environment(endpoint)",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/websocket/kubernetes-shell": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "Execute a websocket on kubectl shell pod",
        "description": "The request will be upgraded to the websocket protocol. The request will proxy input from the client to the pod via long-lived websocket connection.\n**Access policy**: authenticated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "query",
            "description": "environment(endpoint) ID of the environment(endpoint) where the resource is located",
            "required": true,
            "type": "integer"
          },
          {
            "name": "token",
            "in": "query",
            "description": "JWT token used for authentication against this environment(endpoint)",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/websocket/pod": {
      "get": {
        "tags": [
          "websocket"
        ],
        "summary": "Execute a websocket on pod",
        "description": "The request will be upgraded to the websocket protocol.\n**Access policy**: authenticated",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "query",
            "description": "environment(endpoint) ID of the environment(endpoint) where the resource is located",
            "required": true,
            "type": "integer"
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "namespace where the container is located",
            "required": true,
            "type": "string"
          },
          {
            "name": "podName",
            "in": "query",
            "description": "name of the pod containing the container",
            "required": true,
            "type": "string"
          },
          {
            "name": "containerName",
            "in": "query",
            "description": "name of the container",
            "required": true,
            "type": "string"
          },
          {
            "name": "command",
            "in": "query",
            "description": "command to execute in the container",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "description": "JWT token used for authentication against this environment(endpoint)",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "jwt": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-API-KEY",
      "in": "header"
    },
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "auth.authenticatePayload": {
      "type": "object",
      "required": [
        "password",
        "username"
      ],
      "properties": {
        "password": {
          "type": "string",
          "example": "mypassword",
          "description": "Password"
        },
        "username": {
          "type": "string",
          "example": "admin",
          "description": "Username"
        }
      }
    },
    "auth.authenticateResponse": {
      "type": "object",
      "properties": {
        "jwt": {
          "type": "string",
          "example": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzAB",
          "description": "JWT token used to authenticate against the API"
        }
      }
    },
    "auth.oauthPayload": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "OAuth code returned from OAuth Provided"
        }
      }
    },
    "backup.backupPayload": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        }
      }
    },
    "backup.restorePayload": {
      "type": "object",
      "properties": {
        "fileContent": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "fileName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "containers.containerGpusResponse": {
      "type": "object",
      "properties": {
        "gpus": {
          "type": "string"
        }
      }
    },
    "customtemplates.customTemplateFromFileContentPayload": {
      "type": "object",
      "required": [
        "description",
        "fileContent",
        "title",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "High performance web server",
          "description": "Description of the template"
        },
        "edgeTemplate": {
          "type": "boolean",
          "example": false,
          "description": "EdgeTemplate indicates if this template purpose for Edge Stack"
        },
        "fileContent": {
          "type": "string",
          "description": "Content of stack file"
        },
        "logo": {
          "type": "string",
          "example": "https://portainer.io/img/logo.svg",
          "description": "URL of the template's logo"
        },
        "note": {
          "type": "string",
          "example": "This is my <b>custom</b> template",
          "description": "A note that will be displayed in the UI. Supports HTML content"
        },
        "platform": {
          "type": "integer",
          "example": 1,
          "description": "Platform associated to the template.\nValid values are: 1 - 'linux', 2 - 'windows'\nRequired for Docker stacks"
        },
        "title": {
          "type": "string",
          "example": "Nginx",
          "description": "Title of the template"
        },
        "type": {
          "type": "integer",
          "example": 1,
          "description": "Type of created stack:\n* 1 - swarm\n* 2 - compose\n* 3 - kubernetes"
        },
        "variables": {
          "type": "array",
          "description": "Definitions of variables in the stack file",
          "items": {
            "$ref": "#/definitions/portainer.CustomTemplateVariableDefinition"
          }
        }
      }
    },
    "customtemplates.customTemplateFromGitRepositoryPayload": {
      "type": "object",
      "required": [
        "description",
        "repositoryURL",
        "title",
        "type"
      ],
      "properties": {
        "composeFilePathInRepository": {
          "type": "string",
          "example": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "default": "docker-compose.yml"
        },
        "description": {
          "type": "string",
          "example": "High performance web server",
          "description": "Description of the template"
        },
        "edgeTemplate": {
          "type": "boolean",
          "example": false,
          "description": "EdgeTemplate indicates if this template purpose for Edge Stack"
        },
        "isComposeFormat": {
          "type": "boolean",
          "example": false,
          "description": "IsComposeFormat indicates if the Kubernetes template is created from a Docker Compose file"
        },
        "logo": {
          "type": "string",
          "example": "https://portainer.io/img/logo.svg",
          "description": "URL of the template's logo"
        },
        "note": {
          "type": "string",
          "example": "This is my <b>custom</b> template",
          "description": "A note that will be displayed in the UI. Supports HTML content"
        },
        "platform": {
          "type": "integer",
          "example": 1,
          "description": "Platform associated to the template.\nValid values are: 1 - 'linux', 2 - 'windows'\nRequired for Docker stacks"
        },
        "repositoryAuthentication": {
          "type": "boolean",
          "example": true,
          "description": "Use basic authentication to clone the Git repository"
        },
        "repositoryPassword": {
          "type": "string",
          "example": "myGitPassword",
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true."
        },
        "repositoryReferenceName": {
          "type": "string",
          "example": "refs/heads/master",
          "description": "Reference name of a Git repository hosting the Stack file"
        },
        "repositoryURL": {
          "type": "string",
          "example": "https://github.com/openfaas/faas",
          "description": "URL of a Git repository hosting the Stack file"
        },
        "repositoryUsername": {
          "type": "string",
          "example": "myGitUsername",
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true."
        },
        "title": {
          "type": "string",
          "example": "Nginx",
          "description": "Title of the template"
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository"
        },
        "type": {
          "type": "integer",
          "example": 1,
          "description": "Type of created stack:\n* 1 - swarm\n* 2 - compose\n* 3 - kubernetes"
        },
        "variables": {
          "type": "array",
          "description": "Definitions of variables in the stack file",
          "items": {
            "$ref": "#/definitions/portainer.CustomTemplateVariableDefinition"
          }
        }
      }
    },
    "customtemplates.customTemplateUpdatePayload": {
      "type": "object",
      "required": [
        "description",
        "fileContent",
        "repositoryURL",
        "title",
        "type"
      ],
      "properties": {
        "composeFilePathInRepository": {
          "type": "string",
          "example": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "default": "docker-compose.yml"
        },
        "description": {
          "type": "string",
          "example": "High performance web server",
          "description": "Description of the template"
        },
        "edgeTemplate": {
          "type": "boolean",
          "example": false,
          "description": "EdgeTemplate indicates if this template purpose for Edge Stack"
        },
        "fileContent": {
          "type": "string",
          "description": "Content of stack file"
        },
        "isComposeFormat": {
          "type": "boolean",
          "example": false,
          "description": "IsComposeFormat indicates if the Kubernetes template is created from a Docker Compose file"
        },
        "logo": {
          "type": "string",
          "example": "https://portainer.io/img/logo.svg",
          "description": "URL of the template's logo"
        },
        "note": {
          "type": "string",
          "example": "This is my <b>custom</b> template",
          "description": "A note that will be displayed in the UI. Supports HTML content"
        },
        "platform": {
          "type": "integer",
          "example": 1,
          "description": "Platform associated to the template.\nValid values are: 1 - 'linux', 2 - 'windows'\nRequired for Docker stacks"
        },
        "repositoryAuthentication": {
          "type": "boolean",
          "example": true,
          "description": "Use basic authentication to clone the Git repository"
        },
        "repositoryGitCredentialID": {
          "type": "integer",
          "example": 0,
          "description": "GitCredentialID used to identify the bound git credential. Required when RepositoryAuthentication\nis true and RepositoryUsername/RepositoryPassword are not provided"
        },
        "repositoryPassword": {
          "type": "string",
          "example": "myGitPassword",
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true\nand RepositoryGitCredentialID is 0"
        },
        "repositoryReferenceName": {
          "type": "string",
          "example": "refs/heads/master",
          "description": "Reference name of a Git repository hosting the Stack file"
        },
        "repositoryURL": {
          "type": "string",
          "example": "https://github.com/openfaas/faas",
          "description": "URL of a Git repository hosting the Stack file"
        },
        "repositoryUsername": {
          "type": "string",
          "example": "myGitUsername",
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true\nand RepositoryGitCredentialID is 0"
        },
        "title": {
          "type": "string",
          "example": "Nginx",
          "description": "Title of the template"
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository"
        },
        "type": {
          "type": "integer",
          "example": 1,
          "description": "Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)"
        },
        "variables": {
          "type": "array",
          "description": "Definitions of variables in the stack file",
          "items": {
            "$ref": "#/definitions/portainer.CustomTemplateVariableDefinition"
          }
        }
      }
    },
    "customtemplates.fileResponse": {
      "type": "object",
      "properties": {
        "fileContent": {
          "type": "string"
        }
      }
    },
    "demo.EnvironmentDetails": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "environments": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "User Identifier"
          }
        }
      }
    },
    "edge.RegistryCredentials": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string"
        },
        "serverURL": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "edge.StackPayload": {
      "type": "object",
      "properties": {
        "dirEntries": {
          "type": "array",
          "description": "Content of stack folder",
          "items": {
            "$ref": "#/definitions/filesystem.DirEntry"
          }
        },
        "edgeUpdateID": {
          "type": "integer",
          "description": "EdgeUpdateID is the ID of the edge update related to this stack.\nUsed only for EE"
        },
        "entryFileName": {
          "type": "string",
          "description": "Name of the stack entry file"
        },
        "envVars": {
          "type": "array",
          "description": "Used only for EE\nEnvVars is a list of environment variables to inject into the stack",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "filesystemPath": {
          "type": "string",
          "description": "Mount point for relative path"
        },
        "id": {
          "type": "integer",
          "description": "ID of the stack"
        },
        "name": {
          "type": "string",
          "description": "Name of the stack"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace to use for kubernetes stack. Keep empty to use the manifest namespace."
        },
        "prePullImage": {
          "type": "boolean",
          "description": "PrePullImage is a flag indicating if the agent should pull the image before deploying the stack.\nUsed only for EE"
        },
        "rePullImage": {
          "type": "boolean",
          "description": "RePullImage is a flag indicating if the agent should pull the image if it is already present on the node.\nUsed only for EE"
        },
        "readyRePullImage": {
          "type": "boolean",
          "description": "Used only for EE async edge agent\nReadyRePullImage is a flag to indicate whether the auto update is trigger to re-pull image"
        },
        "registryCredentials": {
          "type": "array",
          "description": "RegistryCredentials holds the credentials for a Docker registry.\nUsed only for EE",
          "items": {
            "$ref": "#/definitions/edge.RegistryCredentials"
          }
        },
        "retryDeploy": {
          "type": "boolean",
          "description": "RetryDeploy is a flag indicating if the agent should retry to deploy the stack if it fails.\nUsed only for EE"
        },
        "rollbackTo": {
          "type": "integer",
          "description": "RollbackTo specifies the stack file version to rollback to (only support to rollback to the last version currently)"
        },
        "stackFileContent": {
          "type": "string",
          "description": "Content of the stack file (for compatibility to agent version less than 2.19.0)"
        },
        "supportRelativePath": {
          "type": "boolean",
          "description": "Is relative path supported"
        },
        "version": {
          "type": "integer",
          "description": "Version of the stack file"
        }
      }
    },
    "edgegroups.decoratedEdgeGroup": {
      "type": "object",
      "properties": {
        "Dynamic": {
          "type": "boolean"
        },
        "Endpoints": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
          }
        },
        "HasEdgeJob": {
          "type": "boolean"
        },
        "HasEdgeStack": {
          "type": "boolean"
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "EdgeGroup Identifier"
        },
        "Name": {
          "type": "string"
        },
        "PartialMatch": {
          "type": "boolean"
        },
        "TagIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        },
        "TrustedEndpoints": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
          }
        },
        "endpointTypes": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Environment(Endpoint) environment(endpoint) type. 1 for a Docker environment(endpoint), 2 for an agent on Docker environment(endpoint) or 3 for an Azure environment(endpoint)."
          }
        }
      }
    },
    "edgegroups.edgeGroupCreatePayload": {
      "type": "object",
      "properties": {
        "dynamic": {
          "type": "boolean"
        },
        "endpoints": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
          }
        },
        "name": {
          "type": "string"
        },
        "partialMatch": {
          "type": "boolean"
        },
        "tagIDs": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        }
      }
    },
    "edgegroups.edgeGroupUpdatePayload": {
      "type": "object",
      "properties": {
        "dynamic": {
          "type": "boolean"
        },
        "endpoints": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
          }
        },
        "name": {
          "type": "string"
        },
        "partialMatch": {
          "type": "boolean"
        },
        "tagIDs": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        }
      }
    },
    "edgejobs.edgeJobCreateFromFileContentPayload": {
      "type": "object",
      "properties": {
        "cronExpression": {
          "type": "string"
        },
        "edgeGroups": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "EdgeGroup Identifier"
          }
        },
        "endpoints": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
          }
        },
        "fileContent": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "recurring": {
          "type": "boolean"
        }
      }
    },
    "edgejobs.edgeJobFileResponse": {
      "type": "object",
      "properties": {
        "FileContent": {
          "type": "string"
        }
      }
    },
    "edgejobs.edgeJobUpdatePayload": {
      "type": "object",
      "properties": {
        "cronExpression": {
          "type": "string"
        },
        "edgeGroups": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "EdgeGroup Identifier"
          }
        },
        "endpoints": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
          }
        },
        "fileContent": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "recurring": {
          "type": "boolean"
        }
      }
    },
    "edgejobs.fileResponse": {
      "type": "object",
      "properties": {
        "FileContent": {
          "type": "string"
        }
      }
    },
    "edgejobs.taskContainer": {
      "type": "object",
      "properties": {
        "EndpointId": {
          "type": "integer"
        },
        "Id": {
          "type": "string"
        },
        "LogsStatus": {
          "type": "integer"
        }
      }
    },
    "edgestacks.edgeStackFromGitRepositoryPayload": {
      "type": "object",
      "required": [
        "edgeGroups",
        "name",
        "repositoryURL"
      ],
      "properties": {
        "deploymentType": {
          "type": "integer",
          "example": 0,
          "description": "Deployment type to deploy this stack\nValid values are: 0 - 'compose', 1 - 'kubernetes'\ncompose is enabled only for docker environments\nkubernetes is enabled only for kubernetes environments"
        },
        "edgeGroups": {
          "type": "array",
          "example": [
            1
          ],
          "description": "List of identifiers of EdgeGroups",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "EdgeGroup Identifier"
          }
        },
        "filePathInRepository": {
          "type": "string",
          "example": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "default": "docker-compose.yml"
        },
        "name": {
          "type": "string",
          "example": "myStack",
          "description": "Name of the stack"
        },
        "registries": {
          "type": "array",
          "description": "List of Registries to use for this stack",
          "items": {
            "type": "integer",
            "description": "Registry Identifier"
          }
        },
        "repositoryAuthentication": {
          "type": "boolean",
          "example": true,
          "description": "Use basic authentication to clone the Git repository"
        },
        "repositoryPassword": {
          "type": "string",
          "example": "myGitPassword",
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true."
        },
        "repositoryReferenceName": {
          "type": "string",
          "example": "refs/heads/master",
          "description": "Reference name of a Git repository hosting the Stack file"
        },
        "repositoryURL": {
          "type": "string",
          "example": "https://github.com/openfaas/faas",
          "description": "URL of a Git repository hosting the Stack file"
        },
        "repositoryUsername": {
          "type": "string",
          "example": "myGitUsername",
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true."
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository"
        },
        "useManifestNamespaces": {
          "type": "boolean",
          "description": "Uses the manifest's namespaces instead of the default one"
        }
      }
    },
    "edgestacks.edgeStackFromStringPayload": {
      "type": "object",
      "required": [
        "name",
        "stackFileContent"
      ],
      "properties": {
        "deploymentType": {
          "type": "integer",
          "example": 0,
          "description": "Deployment type to deploy this stack\nValid values are: 0 - 'compose', 1 - 'kubernetes'\ncompose is enabled only for docker environments\nkubernetes is enabled only for kubernetes environments"
        },
        "edgeGroups": {
          "type": "array",
          "example": [
            1
          ],
          "description": "List of identifiers of EdgeGroups",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "EdgeGroup Identifier"
          }
        },
        "name": {
          "type": "string",
          "example": "myStack",
          "description": "Name of the stack"
        },
        "registries": {
          "type": "array",
          "description": "List of Registries to use for this stack",
          "items": {
            "type": "integer",
            "description": "Registry Identifier"
          }
        },
        "stackFileContent": {
          "type": "string",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "description": "Content of the Stack file"
        },
        "useManifestNamespaces": {
          "type": "boolean",
          "description": "Uses the manifest's namespaces instead of the default one"
        }
      }
    },
    "edgestacks.stackFileResponse": {
      "type": "object",
      "properties": {
        "StackFileContent": {
          "type": "string"
        }
      }
    },
    "edgestacks.updateEdgeStackPayload": {
      "type": "object",
      "properties": {
        "deploymentType": {
          "type": "integer",
          "example": 0,
          "description": "Deployment type to deploy this stack\nValid values are: 0 - 'compose', 1 - 'kubernetes'\ncompose is enabled only for docker environments\nkubernetes is enabled only for kubernetes environments"
        },
        "edgeGroups": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "EdgeGroup Identifier"
          }
        },
        "stackFileContent": {
          "type": "string"
        },
        "updateVersion": {
          "type": "boolean"
        },
        "useManifestNamespaces": {
          "type": "boolean",
          "description": "Uses the manifest's namespaces instead of the default one"
        }
      }
    },
    "edgestacks.updateStatusPayload": {
      "type": "object",
      "properties": {
        "endpointID": {
          "type": "integer"
        },
        "error": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "description": "Deprecated"
        },
        "time": {
          "type": "integer"
        }
      }
    },
    "endpointedge.edgeJobResponse": {
      "type": "object",
      "properties": {
        "CollectLogs": {
          "type": "boolean",
          "example": true,
          "description": "Whether to collect logs"
        },
        "CronExpression": {
          "type": "string",
          "example": "* * * * *",
          "description": "A cron expression to schedule this job"
        },
        "Id": {
          "type": "integer",
          "example": 2,
          "description": "EdgeJob Identifier"
        },
        "Script": {
          "type": "string",
          "example": "echo hello",
          "description": "Script to run"
        },
        "Version": {
          "type": "integer",
          "example": 2,
          "description": "Version of this EdgeJob"
        }
      }
    },
    "endpointedge.endpointEdgeStatusInspectResponse": {
      "type": "object",
      "properties": {
        "checkin": {
          "type": "integer",
          "example": 5,
          "description": "The current value of CheckinInterval"
        },
        "credentials": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "example": 8732,
          "description": "The tunnel port"
        },
        "schedules": {
          "type": "array",
          "description": "List of requests for jobs to run on the environment(endpoint)",
          "items": {
            "$ref": "#/definitions/endpointedge.edgeJobResponse"
          }
        },
        "stacks": {
          "type": "array",
          "description": "List of stacks to be deployed on the environments(endpoints)",
          "items": {
            "$ref": "#/definitions/endpointedge.stackStatusResponse"
          }
        },
        "status": {
          "type": "string",
          "example": "REQUIRED",
          "description": "Status represents the environment(endpoint) status"
        }
      }
    },
    "endpointedge.stackStatusResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1,
          "description": "EdgeStack Identifier"
        },
        "version": {
          "type": "integer",
          "example": 3,
          "description": "Version of this stack"
        }
      }
    },
    "endpointgroups.endpointGroupCreatePayload": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "associatedEndpoints": {
          "type": "array",
          "example": [
            1,
            3
          ],
          "description": "List of environment(endpoint) identifiers that will be part of this group",
          "items": {
            "type": "integer",
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
          }
        },
        "description": {
          "type": "string",
          "example": "description",
          "description": "Environment(Endpoint) group description"
        },
        "name": {
          "type": "string",
          "example": "my-environment-group",
          "description": "Environment(Endpoint) group name"
        },
        "tagIDs": {
          "type": "array",
          "example": [
            1,
            2
          ],
          "description": "List of tag identifiers to which this environment(endpoint) group is associated",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        }
      }
    },
    "endpointgroups.endpointGroupUpdatePayload": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "description",
          "description": "Environment(Endpoint) group description"
        },
        "name": {
          "type": "string",
          "example": "my-environment-group",
          "description": "Environment(Endpoint) group name"
        },
        "tagIDs": {
          "type": "array",
          "example": [
            3,
            4
          ],
          "description": "List of tag identifiers associated to the environment(endpoint) group",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        },
        "teamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "userAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      }
    },
    "endpoints.dockerhubStatusResponse": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Daily limit"
        },
        "remaining": {
          "type": "integer",
          "description": "Remaiming images to pull"
        }
      }
    },
    "endpoints.endpointCreateGlobalKeyResponse": {
      "type": "object",
      "properties": {
        "endpointID": {
          "type": "integer",
          "description": "Environment(Endpoint) Identifier"
        }
      }
    },
    "endpoints.endpointDeleteBatchPartialResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "endpoints.endpointDeleteBatchPayload": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/endpoints.endpointDeleteRequest"
          }
        }
      }
    },
    "endpoints.endpointDeleteRequest": {
      "type": "object",
      "properties": {
        "deleteCluster": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "endpoints.endpointSettingsUpdatePayload": {
      "type": "object",
      "properties": {
        "allowBindMountsForRegularUsers": {
          "type": "boolean",
          "example": false,
          "description": "Whether non-administrator should be able to use bind mounts when creating containers"
        },
        "allowContainerCapabilitiesForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to use container capabilities"
        },
        "allowDeviceMappingForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to use device mapping"
        },
        "allowHostNamespaceForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to use the host pid"
        },
        "allowPrivilegedModeForRegularUsers": {
          "type": "boolean",
          "example": false,
          "description": "Whether non-administrator should be able to use privileged mode when creating containers"
        },
        "allowStackManagementForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to manage stacks"
        },
        "allowSysctlSettingForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to use sysctl settings"
        },
        "allowVolumeBrowserForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to browse volumes"
        },
        "enableGPUManagement": {
          "type": "boolean",
          "example": false
        },
        "enableHostManagementFeatures": {
          "type": "boolean",
          "example": true,
          "description": "Whether host management features are enabled"
        },
        "gpus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        }
      }
    },
    "endpoints.endpointUpdatePayload": {
      "type": "object",
      "properties": {
        "azureApplicationID": {
          "type": "string",
          "example": "eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4",
          "description": "Azure application ID"
        },
        "azureAuthenticationKey": {
          "type": "string",
          "example": "cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=",
          "description": "Azure authentication key"
        },
        "azureTenantID": {
          "type": "string",
          "example": "34ddc78d-4fel-2358-8cc1-df84c8o839f5",
          "description": "Azure tenant ID"
        },
        "edgeCheckinInterval": {
          "type": "integer",
          "example": 5,
          "description": "The check in interval for edge agent (in seconds)"
        },
        "gpus": {
          "type": "array",
          "description": "GPUs information",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "groupID": {
          "type": "integer",
          "example": 1,
          "description": "Group identifier"
        },
        "kubernetes": {
          "description": "Associated Kubernetes data",
          "$ref": "#/definitions/portainer.KubernetesData"
        },
        "name": {
          "type": "string",
          "example": "my-environment",
          "description": "Name that will be used to identify this environment(endpoint)"
        },
        "publicURL": {
          "type": "string",
          "example": "docker.mydomain.tld:2375",
          "description": "URL or IP address where exposed containers will be reachable.\\\nDefaults to URL if not specified"
        },
        "status": {
          "type": "integer",
          "example": 1,
          "description": "The status of the environment(endpoint) (1 - up, 2 - down)"
        },
        "tagIDs": {
          "type": "array",
          "example": [
            1,
            2
          ],
          "description": "List of tag identifiers to which this environment(endpoint) is associated",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        },
        "teamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "tls": {
          "type": "boolean",
          "example": true,
          "description": "Require TLS to connect against this environment(endpoint)"
        },
        "tlsskipClientVerify": {
          "type": "boolean",
          "example": false,
          "description": "Skip client verification when using TLS"
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "Skip server verification when using TLS"
        },
        "url": {
          "type": "string",
          "example": "docker.mydomain.tld:2375",
          "description": "URL or IP address of a Docker host"
        },
        "userAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      }
    },
    "endpoints.endpointUpdateRelationsPayload": {
      "type": "object",
      "properties": {
        "relations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "endpoints.endpointUpdateRelationsPayload_relations"
          }
        }
      }
    },
    "endpoints.forceUpdateServicePayload": {
      "type": "object",
      "properties": {
        "pullImage": {
          "type": "boolean",
          "description": "PullImage if true will pull the image"
        },
        "serviceID": {
          "type": "string",
          "description": "ServiceId to update"
        }
      }
    },
    "endpoints.registryAccessPayload": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "teamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "userAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      }
    },
    "fdo.deviceConfigurePayload": {
      "type": "object",
      "properties": {
        "edgeID": {
          "type": "string"
        },
        "edgeKey": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "profile": {
          "type": "integer"
        }
      }
    },
    "fdo.fdoConfigurePayload": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "ownerPassword": {
          "type": "string"
        },
        "ownerURL": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        }
      }
    },
    "filesystem.DirEntry": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "isFile": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "integer"
        }
      }
    },
    "gitops.fileResponse": {
      "type": "object",
      "properties": {
        "fileContent": {
          "type": "string"
        }
      }
    },
    "gitops.repositoryFilePreviewPayload": {
      "type": "object",
      "required": [
        "repository"
      ],
      "properties": {
        "password": {
          "type": "string",
          "example": "myGitPassword"
        },
        "reference": {
          "type": "string",
          "example": "refs/heads/master"
        },
        "repository": {
          "type": "string",
          "example": "https://github.com/openfaas/faas"
        },
        "targetFile": {
          "type": "string",
          "example": "docker-compose.yml",
          "description": "Path to file whose content will be read"
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository"
        },
        "username": {
          "type": "string",
          "example": "myGitUsername"
        }
      }
    },
    "gittypes.GitAuthentication": {
      "type": "object",
      "properties": {
        "gitCredentialID": {
          "type": "integer",
          "example": 0,
          "description": "Git credentials identifier when the value is not 0\nWhen the value is 0, Username and Password are set without using saved credential\nThis is introduced since 2.15.0"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "gittypes.RepoConfig": {
      "type": "object",
      "properties": {
        "authentication": {
          "description": "Git credentials",
          "$ref": "#/definitions/gittypes.GitAuthentication"
        },
        "configFilePath": {
          "type": "string",
          "example": "docker-compose.yml",
          "description": "Path to where the config file is in this url/refName"
        },
        "configHash": {
          "type": "string",
          "example": "bc4c183d756879ea4d173315338110b31004b8e0",
          "description": "Repository hash"
        },
        "referenceName": {
          "type": "string",
          "example": "refs/heads/branch_name",
          "description": "The reference name"
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository"
        },
        "url": {
          "type": "string",
          "example": "https://github.com/portainer/portainer.git",
          "description": "The repo url"
        }
      }
    },
    "helm.addHelmRepoUrlPayload": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "helm.helmUserRepositoryResponse": {
      "type": "object",
      "properties": {
        "GlobalRepository": {
          "type": "string"
        },
        "UserRepositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.HelmUserRepository"
          }
        }
      }
    },
    "helm.installChartPayload": {
      "type": "object",
      "properties": {
        "chart": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "images.ImageResponse": {
      "type": "object",
      "properties": {
        "created": {
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "used": {
          "type": "boolean",
          "description": "Used is true if the image is used by at least one container\nsupplied only when withUsage is true"
        }
      }
    },
    "kubernetes.K8sApplication": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sConfigMapOrSecret": {
      "type": "object",
      "properties": {
        "Annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Applications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CreationDate": {
          "type": "string"
        },
        "Data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "IsSecret": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "SecretType": {
          "type": "string",
          "description": "SecretType will be an empty string for config maps."
        },
        "UID": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sIngressController": {
      "type": "object",
      "properties": {
        "Availability": {
          "type": "boolean"
        },
        "ClassName": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "New": {
          "type": "boolean"
        },
        "Type": {
          "type": "string"
        },
        "Used": {
          "type": "boolean"
        }
      }
    },
    "kubernetes.K8sIngressDeleteRequests": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sIngressInfo": {
      "type": "object",
      "properties": {
        "Annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ClassName": {
          "type": "string"
        },
        "CreationDate": {
          "type": "string"
        },
        "Hosts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "Paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kubernetes.K8sIngressPath"
          }
        },
        "TLS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kubernetes.K8sIngressTLS"
          }
        },
        "Type": {
          "type": "string"
        },
        "UID": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sIngressPath": {
      "type": "object",
      "properties": {
        "Host": {
          "type": "string"
        },
        "IngressName": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "PathType": {
          "type": "string"
        },
        "Port": {
          "type": "integer"
        },
        "ServiceName": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sIngressTLS": {
      "type": "object",
      "properties": {
        "Hosts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SecretName": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sNamespaceDetails": {
      "type": "object",
      "properties": {
        "Annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Owner": {
          "type": "string"
        },
        "ResourceQuota": {
          "$ref": "#/definitions/kubernetes.K8sResourceQuota"
        }
      }
    },
    "kubernetes.K8sResourceQuota": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "memory": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sServiceDeleteRequests": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sServiceInfo": {
      "type": "object",
      "properties": {
        "allocateLoadBalancerNodePorts": {
          "type": "boolean"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "applications": {
          "type": "array",
          "description": "serviceList screen",
          "items": {
            "$ref": "#/definitions/kubernetes.K8sApplication"
          }
        },
        "clusterIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "type": "string"
        },
        "externalIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "externalName": {
          "type": "string"
        },
        "ingressStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kubernetes.K8sServiceIngress"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kubernetes.K8sServicePort"
          }
        },
        "selector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sServiceIngress": {
      "type": "object",
      "properties": {
        "Host": {
          "type": "string"
        },
        "IP": {
          "type": "string"
        }
      }
    },
    "kubernetes.K8sServicePort": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "NodePort": {
          "type": "integer"
        },
        "Port": {
          "type": "integer"
        },
        "Protocol": {
          "type": "string"
        },
        "TargetPort": {
          "type": "string"
        }
      }
    },
    "kubernetes.namespacesToggleSystemPayload": {
      "type": "object",
      "properties": {
        "system": {
          "type": "boolean",
          "example": true,
          "description": "Toggle the system state of this namespace to true or false"
        }
      }
    },
    "ldap.checkPayload": {
      "type": "object",
      "properties": {
        "ldapsettings": {
          "$ref": "#/definitions/portainer.LDAPSettings"
        }
      }
    },
    "motd.motdResponse": {
      "type": "object",
      "properties": {
        "ContentLayout": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Hash": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "Message": {
          "type": "string"
        },
        "Style": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        }
      }
    },
    "openamt.deviceActionPayload": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      }
    },
    "openamt.deviceFeaturesPayload": {
      "type": "object",
      "properties": {
        "features": {
          "$ref": "#/definitions/portainer.OpenAMTDeviceEnabledFeatures"
        }
      }
    },
    "openamt.openAMTConfigurePayload": {
      "type": "object",
      "properties": {
        "certFileContent": {
          "type": "string"
        },
        "certFileName": {
          "type": "string"
        },
        "certFilePassword": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "mpspassword": {
          "type": "string"
        },
        "mpsserver": {
          "type": "string"
        },
        "mpsuser": {
          "type": "string"
        }
      }
    },
    "portainer.APIKey": {
      "type": "object",
      "properties": {
        "dateCreated": {
          "type": "integer",
          "description": "Unix timestamp (UTC) when the API key was created"
        },
        "description": {
          "type": "string",
          "example": "portainer-api-key"
        },
        "digest": {
          "type": "string",
          "description": "Digest represents SHA256 hash of the raw API key"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "lastUsed": {
          "type": "integer",
          "description": "Unix timestamp (UTC) when the API key was last used"
        },
        "prefix": {
          "type": "string",
          "description": "API key identifier (7 char prefix)"
        },
        "userId": {
          "type": "integer",
          "example": 1,
          "description": "User Identifier"
        }
      }
    },
    "portainer.AccessPolicy": {
      "type": "object",
      "properties": {
        "RoleId": {
          "type": "integer",
          "example": 1,
          "description": "Role identifier. Reference the role that will be associated to this access policy"
        }
      }
    },
    "portainer.Authorizations": {
      "type": "object",
      "additionalProperties": {
        "type": "boolean"
      }
    },
    "portainer.AutoUpdateSettings": {
      "type": "object",
      "properties": {
        "forcePullImage": {
          "type": "boolean",
          "example": false,
          "description": "Pull latest image"
        },
        "forceUpdate": {
          "type": "boolean",
          "example": false,
          "description": "Force update ignores repo changes"
        },
        "interval": {
          "type": "string",
          "example": "1m30s",
          "description": "Auto update interval"
        },
        "jobID": {
          "type": "string",
          "example": "15",
          "description": "Autoupdate job id"
        },
        "webhook": {
          "type": "string",
          "example": "05de31a2-79fa-4644-9c12-faa67e5c49f0",
          "description": "A UUID generated from client"
        }
      }
    },
    "portainer.AzureCredentials": {
      "type": "object",
      "properties": {
        "ApplicationID": {
          "type": "string",
          "example": "eag7cdo9-o09l-9i83-9dO9-f0b23oe78db4",
          "description": "Azure application ID"
        },
        "AuthenticationKey": {
          "type": "string",
          "example": "cOrXoK/1D35w8YQ8nH1/8ZGwzz45JIYD5jxHKXEQknk=",
          "description": "Azure authentication key"
        },
        "TenantID": {
          "type": "string",
          "example": "34ddc78d-4fel-2358-8cc1-df84c8o839f5",
          "description": "Azure tenant ID"
        }
      }
    },
    "portainer.CustomTemplate": {
      "type": "object",
      "properties": {
        "CreatedByUserId": {
          "type": "integer",
          "example": 3,
          "description": "User identifier who created this template"
        },
        "Description": {
          "type": "string",
          "example": "High performance web server",
          "description": "Description of the template"
        },
        "EntryPoint": {
          "type": "string",
          "example": "docker-compose.yml",
          "description": "Path to the Stack file"
        },
        "GitConfig": {
          "$ref": "#/definitions/gittypes.RepoConfig"
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "CustomTemplate Identifier"
        },
        "Logo": {
          "type": "string",
          "example": "https://portainer.io/img/logo.svg",
          "description": "URL of the template's logo"
        },
        "Note": {
          "type": "string",
          "example": "This is my <b>custom</b> template",
          "description": "A note that will be displayed in the UI. Supports HTML content"
        },
        "Platform": {
          "type": "integer",
          "example": 1,
          "description": "Platform associated to the template.\nValid values are: 1 - 'linux', 2 - 'windows'"
        },
        "ProjectPath": {
          "type": "string",
          "example": "/data/custom_template/3",
          "description": "Path on disk to the repository hosting the Stack file"
        },
        "ResourceControl": {
          "$ref": "#/definitions/portainer.ResourceControl"
        },
        "Title": {
          "type": "string",
          "example": "Nginx",
          "description": "Title of the template"
        },
        "Type": {
          "type": "integer",
          "example": 1,
          "description": "Type of created stack:\n* 1 - swarm\n* 2 - compose\n* 3 - kubernetes"
        },
        "edgeTemplate": {
          "type": "boolean",
          "example": false,
          "description": "EdgeTemplate indicates if this template purpose for Edge Stack"
        },
        "isComposeFormat": {
          "type": "boolean",
          "example": false,
          "description": "IsComposeFormat indicates if the Kubernetes template is created from a Docker Compose file"
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.CustomTemplateVariableDefinition"
          }
        }
      }
    },
    "portainer.CustomTemplateVariableDefinition": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string",
          "example": "default value"
        },
        "description": {
          "type": "string",
          "example": "Description"
        },
        "label": {
          "type": "string",
          "example": "My Variable"
        },
        "name": {
          "type": "string",
          "example": "MY_VAR"
        }
      }
    },
    "portainer.DockerSnapshot": {
      "type": "object",
      "properties": {
        "ContainerCount": {
          "type": "integer"
        },
        "DockerSnapshotRaw": {
          "$ref": "#/definitions/portainer.DockerSnapshotRaw"
        },
        "DockerVersion": {
          "type": "string"
        },
        "GpuUseAll": {
          "type": "boolean"
        },
        "GpuUseList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "HealthyContainerCount": {
          "type": "integer"
        },
        "ImageCount": {
          "type": "integer"
        },
        "NodeCount": {
          "type": "integer"
        },
        "RunningContainerCount": {
          "type": "integer"
        },
        "ServiceCount": {
          "type": "integer"
        },
        "StackCount": {
          "type": "integer"
        },
        "StoppedContainerCount": {
          "type": "integer"
        },
        "Swarm": {
          "type": "boolean"
        },
        "Time": {
          "type": "integer"
        },
        "TotalCPU": {
          "type": "integer"
        },
        "TotalMemory": {
          "type": "integer"
        },
        "UnhealthyContainerCount": {
          "type": "integer"
        },
        "VolumeCount": {
          "type": "integer"
        }
      }
    },
    "portainer.DockerSnapshotRaw": {
      "type": "object"
    },
    "portainer.EcrData": {
      "type": "object",
      "properties": {
        "Region": {
          "type": "string",
          "example": "ap-southeast-2"
        }
      }
    },
    "portainer.EdgeGroup": {
      "type": "object",
      "properties": {
        "Dynamic": {
          "type": "boolean"
        },
        "Endpoints": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
          }
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "EdgeGroup Identifier"
        },
        "Name": {
          "type": "string"
        },
        "PartialMatch": {
          "type": "boolean"
        },
        "TagIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        }
      }
    },
    "portainer.EdgeJob": {
      "type": "object",
      "properties": {
        "Created": {
          "type": "integer"
        },
        "CronExpression": {
          "type": "string"
        },
        "EdgeGroups": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "EdgeGroup Identifier"
          }
        },
        "Endpoints": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/portainer.EdgeJobEndpointMeta"
          }
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "EdgeJob Identifier"
        },
        "Name": {
          "type": "string"
        },
        "Recurring": {
          "type": "boolean"
        },
        "ScriptPath": {
          "type": "string"
        },
        "Version": {
          "type": "integer"
        },
        "groupLogsCollection": {
          "type": "object",
          "description": "Field used for log collection of Endpoints belonging to EdgeGroups",
          "additionalProperties": {
            "$ref": "#/definitions/portainer.EdgeJobEndpointMeta"
          }
        }
      }
    },
    "portainer.EdgeJobEndpointMeta": {
      "type": "object",
      "properties": {
        "collectLogs": {
          "type": "boolean"
        },
        "logsStatus": {
          "type": "integer"
        }
      }
    },
    "portainer.EdgeStack": {
      "type": "object",
      "properties": {
        "CreationDate": {
          "type": "integer",
          "description": "StatusArray    map[EndpointID][]EdgeStackStatus `json:\"StatusArray\"`"
        },
        "EdgeGroups": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "EdgeGroup Identifier"
          }
        },
        "EntryPoint": {
          "type": "string"
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "EdgeStack Identifier"
        },
        "Name": {
          "type": "string"
        },
        "NumDeployments": {
          "type": "integer"
        },
        "ProjectPath": {
          "type": "string"
        },
        "Prune": {
          "type": "boolean",
          "description": "Deprecated"
        },
        "Status": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/portainer.EdgeStackStatus"
          }
        },
        "Version": {
          "type": "integer"
        },
        "deploymentType": {
          "type": "integer"
        },
        "manifestPath": {
          "type": "string"
        },
        "useManifestNamespaces": {
          "type": "boolean",
          "description": "Uses the manifest's namespaces instead of the default one"
        }
      }
    },
    "portainer.EdgeStackDeploymentStatus": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "rollbackTo": {
          "type": "integer",
          "description": "EE only feature"
        },
        "time": {
          "type": "integer"
        },
        "type": {
          "type": "integer"
        }
      }
    },
    "portainer.EdgeStackStatus": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "integer",
          "description": "Deprecated"
        },
        "deploymentInfo": {
          "description": "EE only feature",
          "$ref": "#/definitions/portainer.StackDeploymentInfo"
        },
        "details": {
          "description": "Deprecated",
          "$ref": "#/definitions/portainer.EdgeStackStatusDetails"
        },
        "endpointID": {
          "type": "integer"
        },
        "error": {
          "type": "string",
          "description": "Deprecated"
        },
        "readyRePullImage": {
          "type": "boolean",
          "description": "ReadyRePullImage is a flag to indicate whether the auto update is trigger to re-pull image"
        },
        "status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.EdgeStackDeploymentStatus"
          }
        }
      }
    },
    "portainer.EdgeStackStatusDetails": {
      "type": "object",
      "properties": {
        "acknowledged": {
          "type": "boolean"
        },
        "error": {
          "type": "boolean"
        },
        "imagesPulled": {
          "type": "boolean"
        },
        "ok": {
          "type": "boolean"
        },
        "pending": {
          "type": "boolean"
        },
        "remoteUpdateSuccess": {
          "type": "boolean"
        },
        "remove": {
          "type": "boolean"
        }
      }
    },
    "portainer.Endpoint": {
      "type": "object",
      "properties": {
        "AMTDeviceGUID": {
          "type": "string",
          "example": "4c4c4544-004b-3910-8037-b6c04f504633",
          "description": "The identifier of the AMT Device associated with this environment(endpoint)"
        },
        "AuthorizedTeams": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Team Identifier"
          }
        },
        "AuthorizedUsers": {
          "type": "array",
          "description": "Deprecated in DBVersion == 18",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "User Identifier"
          }
        },
        "AzureCredentials": {
          "$ref": "#/definitions/portainer.AzureCredentials"
        },
        "ComposeSyntaxMaxVersion": {
          "type": "string",
          "example": "3.8",
          "description": "Maximum version of docker-compose"
        },
        "EdgeCheckinInterval": {
          "type": "integer",
          "example": 5,
          "description": "The check in interval for edge agent (in seconds)"
        },
        "EdgeID": {
          "type": "string",
          "description": "The identifier of the edge agent associated with this environment(endpoint)"
        },
        "EdgeKey": {
          "type": "string",
          "description": "The key which is used to map the agent to Portainer"
        },
        "EnableGPUManagement": {
          "type": "boolean"
        },
        "Gpus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "GroupId": {
          "type": "integer",
          "example": 1,
          "description": "Environment(Endpoint) group identifier"
        },
        "Heartbeat": {
          "type": "boolean",
          "example": true,
          "description": "Heartbeat indicates the heartbeat status of an edge environment"
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "Environment(Endpoint) Identifier"
        },
        "IsEdgeDevice": {
          "type": "boolean",
          "description": "Deprecated v2.18"
        },
        "Kubernetes": {
          "description": "Associated Kubernetes data",
          "$ref": "#/definitions/portainer.KubernetesData"
        },
        "Name": {
          "type": "string",
          "example": "my-environment",
          "description": "Environment(Endpoint) name"
        },
        "PostInitMigrations": {
          "description": "Whether we need to run any \"post init migrations\".",
          "$ref": "#/definitions/portainer.EndpointPostInitMigrations"
        },
        "PublicURL": {
          "type": "string",
          "example": "docker.mydomain.tld:2375",
          "description": "URL or IP address where exposed containers will be reachable"
        },
        "Snapshots": {
          "type": "array",
          "description": "List of snapshots",
          "items": {
            "$ref": "#/definitions/portainer.DockerSnapshot"
          }
        },
        "Status": {
          "type": "integer",
          "example": 1,
          "description": "The status of the environment(endpoint) (1 - up, 2 - down)"
        },
        "TLS": {
          "type": "boolean",
          "description": "Deprecated fields\nDeprecated in DBVersion == 4"
        },
        "TLSCACert": {
          "type": "string"
        },
        "TLSCert": {
          "type": "string"
        },
        "TLSConfig": {
          "$ref": "#/definitions/portainer.TLSConfiguration"
        },
        "TLSKey": {
          "type": "string"
        },
        "TagIds": {
          "type": "array",
          "description": "List of tag identifiers to which this environment(endpoint) is associated",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        },
        "Tags": {
          "type": "array",
          "description": "Deprecated in DBVersion == 22",
          "items": {
            "type": "string"
          }
        },
        "TeamAccessPolicies": {
          "description": "List of team identifiers authorized to connect to this environment(endpoint)",
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "Type": {
          "type": "integer",
          "example": 1,
          "description": "Environment(Endpoint) environment(endpoint) type. 1 for a Docker environment(endpoint), 2 for an agent on Docker environment(endpoint) or 3 for an Azure environment(endpoint)."
        },
        "URL": {
          "type": "string",
          "example": "docker.mydomain.tld:2375",
          "description": "URL or IP address of the Docker host associated to this environment(endpoint)"
        },
        "UserAccessPolicies": {
          "description": "List of user identifiers authorized to connect to this environment(endpoint)",
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        },
        "UserTrusted": {
          "type": "boolean",
          "description": "Whether the device has been trusted or not by the user"
        },
        "agent": {
          "$ref": "portainer.Endpoint_agent"
        },
        "edge": {
          "$ref": "#/definitions/portainer.EnvironmentEdgeSettings"
        },
        "lastCheckInDate": {
          "type": "integer",
          "description": "LastCheckInDate mark last check-in date on checkin"
        },
        "queryDate": {
          "type": "integer",
          "description": "QueryDate of each query with the endpoints list"
        },
        "securitySettings": {
          "description": "Environment(Endpoint) specific security settings",
          "$ref": "#/definitions/portainer.EndpointSecuritySettings"
        }
      }
    },
    "portainer.EndpointAuthorizations": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/portainer.Authorizations"
      }
    },
    "portainer.EndpointGroup": {
      "type": "object",
      "properties": {
        "AuthorizedTeams": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Team Identifier"
          }
        },
        "AuthorizedUsers": {
          "type": "array",
          "description": "Deprecated in DBVersion == 18",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "User Identifier"
          }
        },
        "Description": {
          "type": "string",
          "example": "Environment(Endpoint) group description",
          "description": "Description associated to the environment(endpoint) group"
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "Environment(Endpoint) group Identifier"
        },
        "Labels": {
          "type": "array",
          "description": "Deprecated fields",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "Name": {
          "type": "string",
          "example": "my-environment-group",
          "description": "Environment(Endpoint) group name"
        },
        "TagIds": {
          "type": "array",
          "description": "List of tags associated to this environment(endpoint) group",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        },
        "Tags": {
          "type": "array",
          "description": "Deprecated in DBVersion == 22",
          "items": {
            "type": "string"
          }
        },
        "TeamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "UserAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      }
    },
    "portainer.EndpointPostInitMigrations": {
      "type": "object",
      "properties": {
        "MigrateGPUs": {
          "type": "boolean"
        },
        "MigrateIngresses": {
          "type": "boolean"
        }
      }
    },
    "portainer.EndpointSecuritySettings": {
      "type": "object",
      "properties": {
        "allowBindMountsForRegularUsers": {
          "type": "boolean",
          "example": false,
          "description": "Whether non-administrator should be able to use bind mounts when creating containers"
        },
        "allowContainerCapabilitiesForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to use container capabilities"
        },
        "allowDeviceMappingForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to use device mapping"
        },
        "allowHostNamespaceForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to use the host pid"
        },
        "allowPrivilegedModeForRegularUsers": {
          "type": "boolean",
          "example": false,
          "description": "Whether non-administrator should be able to use privileged mode when creating containers"
        },
        "allowStackManagementForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to manage stacks"
        },
        "allowSysctlSettingForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to use sysctl settings"
        },
        "allowVolumeBrowserForRegularUsers": {
          "type": "boolean",
          "example": true,
          "description": "Whether non-administrator should be able to browse volumes"
        },
        "enableHostManagementFeatures": {
          "type": "boolean",
          "example": true,
          "description": "Whether host management features are enabled"
        }
      }
    },
    "portainer.EnvironmentEdgeSettings": {
      "type": "object",
      "properties": {
        "CommandInterval": {
          "type": "integer",
          "example": 60,
          "description": "The command list interval for edge agent - used in edge async mode [seconds]"
        },
        "PingInterval": {
          "type": "integer",
          "example": 60,
          "description": "The ping interval for edge agent - used in edge async mode [seconds]"
        },
        "SnapshotInterval": {
          "type": "integer",
          "example": 60,
          "description": "The snapshot interval for edge agent - used in edge async mode [seconds]"
        },
        "asyncMode": {
          "type": "boolean",
          "description": "Whether the device has been started in edge async mode"
        }
      }
    },
    "portainer.FDOConfiguration": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "ownerPassword": {
          "type": "string"
        },
        "ownerURL": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        }
      }
    },
    "portainer.GitlabRegistryData": {
      "type": "object",
      "properties": {
        "InstanceURL": {
          "type": "string"
        },
        "ProjectId": {
          "type": "integer"
        },
        "ProjectPath": {
          "type": "string"
        }
      }
    },
    "portainer.GlobalDeploymentOptions": {
      "type": "object",
      "properties": {
        "hideStacksFunctionality": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "portainer.HelmUserRepository": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "Membership Identifier"
        },
        "URL": {
          "type": "string",
          "example": "https://charts.bitnami.com/bitnami",
          "description": "Helm repository URL"
        },
        "UserId": {
          "type": "integer",
          "example": 1,
          "description": "User identifier"
        }
      }
    },
    "portainer.InternalAuthSettings": {
      "type": "object",
      "properties": {
        "requiredPasswordLength": {
          "type": "integer"
        }
      }
    },
    "portainer.K8sNamespaceInfo": {
      "type": "object",
      "properties": {
        "IsDefault": {
          "type": "boolean"
        },
        "IsSystem": {
          "type": "boolean"
        }
      }
    },
    "portainer.K8sNodeLimits": {
      "type": "object",
      "properties": {
        "CPU": {
          "type": "integer"
        },
        "Memory": {
          "type": "integer"
        }
      }
    },
    "portainer.K8sNodesLimits": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/portainer.K8sNodeLimits"
      }
    },
    "portainer.KubernetesConfiguration": {
      "type": "object",
      "properties": {
        "AllowNoneIngressClass": {
          "type": "boolean"
        },
        "EnableResourceOverCommit": {
          "type": "boolean"
        },
        "IngressAvailabilityPerNamespace": {
          "type": "boolean"
        },
        "IngressClasses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.KubernetesIngressClassConfig"
          }
        },
        "ResourceOverCommitPercentage": {
          "type": "integer"
        },
        "RestrictDefaultNamespace": {
          "type": "boolean"
        },
        "StorageClasses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.KubernetesStorageClassConfig"
          }
        },
        "UseLoadBalancer": {
          "type": "boolean"
        },
        "UseServerMetrics": {
          "type": "boolean"
        }
      }
    },
    "portainer.KubernetesData": {
      "type": "object",
      "properties": {
        "Configuration": {
          "$ref": "#/definitions/portainer.KubernetesConfiguration"
        },
        "Flags": {
          "$ref": "#/definitions/portainer.KubernetesFlags"
        },
        "Snapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.KubernetesSnapshot"
          }
        }
      }
    },
    "portainer.KubernetesFlags": {
      "type": "object",
      "properties": {
        "IsServerIngressClassDetected": {
          "type": "boolean"
        },
        "IsServerMetricsDetected": {
          "type": "boolean"
        },
        "IsServerStorageDetected": {
          "type": "boolean"
        }
      }
    },
    "portainer.KubernetesIngressClassConfig": {
      "type": "object",
      "properties": {
        "Blocked": {
          "type": "boolean"
        },
        "BlockedNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "portainer.KubernetesSnapshot": {
      "type": "object",
      "properties": {
        "KubernetesVersion": {
          "type": "string"
        },
        "NodeCount": {
          "type": "integer"
        },
        "Time": {
          "type": "integer"
        },
        "TotalCPU": {
          "type": "integer"
        },
        "TotalMemory": {
          "type": "integer"
        }
      }
    },
    "portainer.KubernetesStorageClassConfig": {
      "type": "object",
      "properties": {
        "AccessModes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AllowVolumeExpansion": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "Provisioner": {
          "type": "string"
        }
      }
    },
    "portainer.LDAPGroupSearchSettings": {
      "type": "object",
      "properties": {
        "GroupAttribute": {
          "type": "string",
          "example": "member",
          "description": "LDAP attribute which denotes the group membership"
        },
        "GroupBaseDN": {
          "type": "string",
          "example": "dc=ldap,dc=domain,dc=tld",
          "description": "The distinguished name of the element from which the LDAP server will search for groups"
        },
        "GroupFilter": {
          "type": "string",
          "example": "(objectClass=account",
          "description": "The LDAP search filter used to select group elements, optional"
        }
      }
    },
    "portainer.LDAPSearchSettings": {
      "type": "object",
      "properties": {
        "BaseDN": {
          "type": "string",
          "example": "dc=ldap,dc=domain,dc=tld",
          "description": "The distinguished name of the element from which the LDAP server will search for users"
        },
        "Filter": {
          "type": "string",
          "example": "(objectClass=account)",
          "description": "Optional LDAP search filter used to select user elements"
        },
        "UserNameAttribute": {
          "type": "string",
          "example": "uid",
          "description": "LDAP attribute which denotes the username"
        }
      }
    },
    "portainer.LDAPSettings": {
      "type": "object",
      "properties": {
        "AnonymousMode": {
          "type": "boolean",
          "example": true,
          "description": "Enable this option if the server is configured for Anonymous access. When enabled, ReaderDN and Password will not be used"
        },
        "AutoCreateUsers": {
          "type": "boolean",
          "example": true,
          "description": "Automatically provision users and assign them to matching LDAP group names"
        },
        "GroupSearchSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.LDAPGroupSearchSettings"
          }
        },
        "Password": {
          "type": "string",
          "example": "readonly-password",
          "description": "Password of the account that will be used to search users"
        },
        "ReaderDN": {
          "type": "string",
          "example": "cn=readonly-account,dc=ldap,dc=domain,dc=tld",
          "description": "Account that will be used to search for users"
        },
        "SearchSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.LDAPSearchSettings"
          }
        },
        "StartTLS": {
          "type": "boolean",
          "example": true,
          "description": "Whether LDAP connection should use StartTLS"
        },
        "TLSConfig": {
          "$ref": "#/definitions/portainer.TLSConfiguration"
        },
        "URL": {
          "type": "string",
          "example": "myldap.domain.tld:389",
          "description": "URL or IP address of the LDAP server"
        }
      }
    },
    "portainer.OAuthSettings": {
      "type": "object",
      "properties": {
        "AccessTokenURI": {
          "type": "string"
        },
        "AuthStyle": {
          "type": "integer"
        },
        "AuthorizationURI": {
          "type": "string"
        },
        "ClientID": {
          "type": "string"
        },
        "ClientSecret": {
          "type": "string"
        },
        "DefaultTeamID": {
          "type": "integer"
        },
        "KubeSecretKey": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "LogoutURI": {
          "type": "string"
        },
        "OAuthAutoCreateUsers": {
          "type": "boolean"
        },
        "RedirectURI": {
          "type": "string"
        },
        "ResourceURI": {
          "type": "string"
        },
        "SSO": {
          "type": "boolean"
        },
        "Scopes": {
          "type": "string"
        },
        "UserIdentifier": {
          "type": "string"
        }
      }
    },
    "portainer.OpenAMTConfiguration": {
      "type": "object",
      "properties": {
        "certFileContent": {
          "type": "string"
        },
        "certFileName": {
          "type": "string"
        },
        "certFilePassword": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "mpsPassword": {
          "type": "string"
        },
        "mpsServer": {
          "type": "string"
        },
        "mpsToken": {
          "type": "string",
          "description": "retrieved from API"
        },
        "mpsUser": {
          "type": "string"
        }
      }
    },
    "portainer.OpenAMTDeviceEnabledFeatures": {
      "type": "object",
      "properties": {
        "IDER": {
          "type": "boolean"
        },
        "KVM": {
          "type": "boolean"
        },
        "SOL": {
          "type": "boolean"
        },
        "redirection": {
          "type": "boolean"
        },
        "userConsent": {
          "type": "string"
        }
      }
    },
    "portainer.Pair": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "name"
        },
        "value": {
          "type": "string",
          "example": "value"
        }
      }
    },
    "portainer.QuayRegistryData": {
      "type": "object",
      "properties": {
        "OrganisationName": {
          "type": "string"
        },
        "UseOrganisation": {
          "type": "boolean"
        }
      }
    },
    "portainer.Registry": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "type": "string",
          "description": "Stores temporary access token"
        },
        "AccessTokenExpiry": {
          "type": "integer"
        },
        "Authentication": {
          "type": "boolean",
          "example": true,
          "description": "Is authentication against this registry enabled"
        },
        "AuthorizedTeams": {
          "type": "array",
          "description": "Deprecated in DBVersion == 18",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Team Identifier"
          }
        },
        "AuthorizedUsers": {
          "type": "array",
          "description": "Deprecated in DBVersion == 18",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "User Identifier"
          }
        },
        "BaseURL": {
          "type": "string",
          "example": "registry.mydomain.tld:2375",
          "description": "Base URL, introduced for ProGet registry"
        },
        "Ecr": {
          "$ref": "#/definitions/portainer.EcrData"
        },
        "Gitlab": {
          "$ref": "#/definitions/portainer.GitlabRegistryData"
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "Registry Identifier"
        },
        "ManagementConfiguration": {
          "$ref": "#/definitions/portainer.RegistryManagementConfiguration"
        },
        "Name": {
          "type": "string",
          "example": "my-registry",
          "description": "Registry Name"
        },
        "Password": {
          "type": "string",
          "example": "registry_password",
          "description": "Password or SecretAccessKey used to authenticate against this registry"
        },
        "Quay": {
          "$ref": "#/definitions/portainer.QuayRegistryData"
        },
        "RegistryAccesses": {
          "$ref": "#/definitions/portainer.RegistryAccesses"
        },
        "TeamAccessPolicies": {
          "description": "Deprecated in DBVersion == 31",
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "Type": {
          "type": "integer",
          "description": "Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR)"
        },
        "URL": {
          "type": "string",
          "example": "registry.mydomain.tld:2375",
          "description": "URL or IP address of the Docker registry"
        },
        "UserAccessPolicies": {
          "description": "Deprecated fields\nDeprecated in DBVersion == 31",
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        },
        "Username": {
          "type": "string",
          "example": "registry user",
          "description": "Username or AccessKeyID used to authenticate against this registry"
        }
      }
    },
    "portainer.RegistryAccessPolicies": {
      "type": "object",
      "properties": {
        "Namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TeamAccessPolicies": {
          "$ref": "#/definitions/portainer.TeamAccessPolicies"
        },
        "UserAccessPolicies": {
          "$ref": "#/definitions/portainer.UserAccessPolicies"
        }
      }
    },
    "portainer.RegistryAccesses": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/portainer.RegistryAccessPolicies"
      }
    },
    "portainer.RegistryManagementConfiguration": {
      "type": "object",
      "properties": {
        "AccessToken": {
          "type": "string"
        },
        "AccessTokenExpiry": {
          "type": "integer"
        },
        "Authentication": {
          "type": "boolean"
        },
        "Ecr": {
          "$ref": "#/definitions/portainer.EcrData"
        },
        "Password": {
          "type": "string"
        },
        "TLSConfig": {
          "$ref": "#/definitions/portainer.TLSConfiguration"
        },
        "Type": {
          "type": "integer",
          "description": "Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR)"
        },
        "Username": {
          "type": "string"
        }
      }
    },
    "portainer.ResourceControl": {
      "type": "object",
      "properties": {
        "AccessLevel": {
          "type": "integer"
        },
        "AdministratorsOnly": {
          "type": "boolean",
          "example": true,
          "description": "Permit access to resource only to admins"
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "ResourceControl Identifier"
        },
        "OwnerId": {
          "type": "integer",
          "description": "Deprecated fields\nDeprecated in DBVersion == 2"
        },
        "Public": {
          "type": "boolean",
          "example": true,
          "description": "Permit access to the associated resource to any user"
        },
        "ResourceId": {
          "type": "string",
          "example": "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08",
          "description": "Docker resource identifier on which access control will be applied.\\\nIn the case of a resource control applied to a stack, use the stack name as identifier"
        },
        "SubResourceIds": {
          "type": "array",
          "example": [
            "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
          ],
          "description": "List of Docker resources that will inherit this access control",
          "items": {
            "type": "string"
          }
        },
        "System": {
          "type": "boolean"
        },
        "TeamAccesses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.TeamResourceAccess"
          }
        },
        "Type": {
          "type": "integer",
          "example": 1,
          "description": "Type of Docker resource. Valid values are: 1- container, 2 -service\n3 - volume, 4 - secret, 5 - stack, 6 - config or 7 - custom template"
        },
        "UserAccesses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.UserResourceAccess"
          }
        }
      }
    },
    "portainer.Role": {
      "type": "object",
      "properties": {
        "Authorizations": {
          "description": "Authorizations associated to a role",
          "$ref": "#/definitions/portainer.Authorizations"
        },
        "Description": {
          "type": "string",
          "example": "Read-only access of all resources in an environment(endpoint)",
          "description": "Role description"
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "Role Identifier"
        },
        "Name": {
          "type": "string",
          "example": "HelpDesk",
          "description": "Role name"
        },
        "Priority": {
          "type": "integer"
        }
      }
    },
    "portainer.SSLSettings": {
      "type": "object",
      "properties": {
        "certPath": {
          "type": "string"
        },
        "httpEnabled": {
          "type": "boolean"
        },
        "keyPath": {
          "type": "string"
        },
        "selfSigned": {
          "type": "boolean"
        }
      }
    },
    "portainer.Settings": {
      "type": "object",
      "properties": {
        "AgentSecret": {
          "type": "string",
          "description": "Container environment parameter AGENT_SECRET"
        },
        "AllowBindMountsForRegularUsers": {
          "type": "boolean"
        },
        "AllowContainerCapabilitiesForRegularUsers": {
          "type": "boolean"
        },
        "AllowDeviceMappingForRegularUsers": {
          "type": "boolean"
        },
        "AllowHostNamespaceForRegularUsers": {
          "type": "boolean"
        },
        "AllowPrivilegedModeForRegularUsers": {
          "type": "boolean"
        },
        "AllowStackManagementForRegularUsers": {
          "type": "boolean"
        },
        "AllowVolumeBrowserForRegularUsers": {
          "type": "boolean"
        },
        "AuthenticationMethod": {
          "type": "integer",
          "example": 1,
          "description": "Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth"
        },
        "BlackListedLabels": {
          "type": "array",
          "description": "A list of label name & value that will be used to hide containers when querying containers",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "DisplayDonationHeader": {
          "type": "boolean",
          "description": "Deprecated fields"
        },
        "DisplayExternalContributors": {
          "type": "boolean"
        },
        "EdgeAgentCheckinInterval": {
          "type": "integer",
          "example": 5,
          "description": "The default check in interval for edge agent (in seconds)"
        },
        "EdgePortainerUrl": {
          "type": "string",
          "description": "EdgePortainerURL is the URL that is exposed to edge agents"
        },
        "EnableEdgeComputeFeatures": {
          "type": "boolean",
          "description": "Whether edge compute features are enabled"
        },
        "EnableHostManagementFeatures": {
          "type": "boolean",
          "description": "Deprecated fields v26"
        },
        "EnableTelemetry": {
          "type": "boolean",
          "example": false,
          "description": "Whether telemetry is enabled"
        },
        "EnforceEdgeID": {
          "type": "boolean",
          "example": false,
          "description": "EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone"
        },
        "FeatureFlagSettings": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "GlobalDeploymentOptions": {
          "description": "Deployment options for encouraging git ops workflows",
          "$ref": "#/definitions/portainer.GlobalDeploymentOptions"
        },
        "HelmRepositoryURL": {
          "type": "string",
          "example": "https://charts.bitnami.com/bitnami",
          "description": "Helm repository URL, defaults to \"https://charts.bitnami.com/bitnami\""
        },
        "InternalAuthSettings": {
          "$ref": "#/definitions/portainer.InternalAuthSettings"
        },
        "IsDockerDesktopExtension": {
          "type": "boolean"
        },
        "KubeconfigExpiry": {
          "type": "string",
          "example": "24h",
          "description": "The expiry of a Kubeconfig"
        },
        "KubectlShellImage": {
          "type": "string",
          "example": "portainer/kubectl-shell",
          "description": "KubectlImage, defaults to portainer/kubectl-shell"
        },
        "LDAPSettings": {
          "$ref": "#/definitions/portainer.LDAPSettings"
        },
        "LogoURL": {
          "type": "string",
          "example": "https://mycompany.mydomain.tld/logo.png",
          "description": "URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string"
        },
        "OAuthSettings": {
          "$ref": "#/definitions/portainer.OAuthSettings"
        },
        "ShowKomposeBuildOption": {
          "type": "boolean",
          "example": false,
          "description": "Show the Kompose build option (discontinued in 2.18)"
        },
        "SnapshotInterval": {
          "type": "string",
          "example": "5m",
          "description": "The interval in which environment(endpoint) snapshots are created"
        },
        "TemplatesURL": {
          "type": "string",
          "example": "https://raw.githubusercontent.com/portainer/templates/master/templates.json",
          "description": "URL to the templates that will be displayed in the UI when navigating to App Templates"
        },
        "TrustOnFirstConnect": {
          "type": "boolean",
          "example": false,
          "description": "TrustOnFirstConnect makes Portainer accepting edge agent connection by default"
        },
        "UserSessionTimeout": {
          "type": "string",
          "example": "5m",
          "description": "The duration of a user session"
        },
        "edge": {
          "$ref": "portainer.Settings_edge"
        },
        "fdoConfiguration": {
          "$ref": "#/definitions/portainer.FDOConfiguration"
        },
        "openAMTConfiguration": {
          "$ref": "#/definitions/portainer.OpenAMTConfiguration"
        }
      }
    },
    "portainer.Stack": {
      "type": "object",
      "properties": {
        "AdditionalFiles": {
          "type": "array",
          "description": "Only applies when deploying stack with multiple files",
          "items": {
            "type": "string"
          }
        },
        "AutoUpdate": {
          "description": "The GitOps update settings of a git stack",
          "$ref": "#/definitions/portainer.AutoUpdateSettings"
        },
        "EndpointId": {
          "type": "integer",
          "example": 1,
          "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
        },
        "EntryPoint": {
          "type": "string",
          "example": "docker-compose.yml",
          "description": "Path to the Stack file"
        },
        "Env": {
          "type": "array",
          "description": "A list of environment(endpoint) variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "Stack Identifier"
        },
        "Name": {
          "type": "string",
          "example": "myStack",
          "description": "Stack name"
        },
        "Option": {
          "description": "The stack deployment option",
          "$ref": "#/definitions/portainer.StackOption"
        },
        "ResourceControl": {
          "$ref": "#/definitions/portainer.ResourceControl"
        },
        "Status": {
          "type": "integer",
          "example": 1,
          "description": "Stack status (1 - active, 2 - inactive)"
        },
        "SwarmId": {
          "type": "string",
          "example": "jpofkc0i9uo9wtx1zesuk649w",
          "description": "Cluster identifier of the Swarm cluster where the stack is deployed"
        },
        "Type": {
          "type": "integer",
          "example": 2,
          "description": "Stack type. 1 for a Swarm stack, 2 for a Compose stack"
        },
        "createdBy": {
          "type": "string",
          "example": "admin",
          "description": "The username which created this stack"
        },
        "creationDate": {
          "type": "integer",
          "example": 1587399600,
          "description": "The date in unix time when stack was created"
        },
        "fromAppTemplate": {
          "type": "boolean",
          "example": false,
          "description": "Whether the stack is from a app template"
        },
        "gitConfig": {
          "description": "The git config of this stack",
          "$ref": "#/definitions/gittypes.RepoConfig"
        },
        "isComposeFormat": {
          "type": "boolean",
          "example": false,
          "description": "IsComposeFormat indicates if the Kubernetes stack is created from a Docker Compose file"
        },
        "namespace": {
          "type": "string",
          "example": "default",
          "description": "Kubernetes namespace if stack is a kube application"
        },
        "projectPath": {
          "type": "string",
          "example": "/data/compose/myStack_jpofkc0i9uo9wtx1zesuk649w",
          "description": "Path on disk to the repository hosting the Stack file"
        },
        "updateDate": {
          "type": "integer",
          "example": 1587399600,
          "description": "The date in unix time when stack was last updated"
        },
        "updatedBy": {
          "type": "string",
          "example": "bob",
          "description": "The username which last updated this stack"
        }
      }
    },
    "portainer.StackDeploymentInfo": {
      "type": "object",
      "properties": {
        "ConfigHash": {
          "type": "string",
          "description": "ConfigHash is the commit hash of the git repository used for deploying the stack"
        },
        "FileVersion": {
          "type": "integer",
          "description": "FileVersion is the version of the stack file, used to detect changes"
        },
        "Version": {
          "type": "integer",
          "description": "Version is the version of the stack and also is the deployed version in edge agent"
        }
      }
    },
    "portainer.StackOption": {
      "type": "object",
      "properties": {
        "prune": {
          "type": "boolean",
          "example": false,
          "description": "Prune services that are no longer referenced"
        }
      }
    },
    "portainer.TLSConfiguration": {
      "type": "object",
      "properties": {
        "TLS": {
          "type": "boolean",
          "example": true,
          "description": "Use TLS"
        },
        "TLSCACert": {
          "type": "string",
          "example": "/data/tls/ca.pem",
          "description": "Path to the TLS CA certificate file"
        },
        "TLSCert": {
          "type": "string",
          "example": "/data/tls/cert.pem",
          "description": "Path to the TLS client certificate file"
        },
        "TLSKey": {
          "type": "string",
          "example": "/data/tls/key.pem",
          "description": "Path to the TLS client key file"
        },
        "TLSSkipVerify": {
          "type": "boolean",
          "example": false,
          "description": "Skip the verification of the server TLS certificate"
        }
      }
    },
    "portainer.Tag": {
      "type": "object",
      "properties": {
        "EndpointGroups": {
          "type": "object",
          "description": "A set of environment(endpoint) group ids that have this tag",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "Endpoints": {
          "type": "object",
          "description": "A set of environment(endpoint) ids that have this tag",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "Name": {
          "type": "string",
          "example": "org/acme",
          "description": "Tag name"
        },
        "id": {
          "type": "integer",
          "example": 1,
          "description": "Tag identifier"
        }
      }
    },
    "portainer.Team": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "Team Identifier"
        },
        "Name": {
          "type": "string",
          "example": "developers",
          "description": "Team name"
        }
      }
    },
    "portainer.TeamAccessPolicies": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/portainer.AccessPolicy"
      }
    },
    "portainer.TeamMembership": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "Membership Identifier"
        },
        "Role": {
          "type": "integer",
          "example": 1,
          "description": "Team role (1 for team leader and 2 for team member)"
        },
        "TeamID": {
          "type": "integer",
          "example": 1,
          "description": "Team identifier"
        },
        "UserID": {
          "type": "integer",
          "example": 1,
          "description": "User identifier"
        }
      }
    },
    "portainer.TeamResourceAccess": {
      "type": "object",
      "properties": {
        "AccessLevel": {
          "type": "integer"
        },
        "TeamId": {
          "type": "integer"
        }
      }
    },
    "portainer.Template": {
      "type": "object",
      "properties": {
        "administrator_only": {
          "type": "boolean",
          "example": true,
          "description": "Whether the template should be available to administrators only"
        },
        "categories": {
          "type": "array",
          "example": [
            "database"
          ],
          "description": "A list of categories associated to the template",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "type": "string",
          "example": "ls -lah",
          "description": "The command that will be executed in a container template"
        },
        "description": {
          "type": "string",
          "example": "High performance web server",
          "description": "Description of the template"
        },
        "env": {
          "type": "array",
          "description": "A list of environment(endpoint) variables used during the template deployment",
          "items": {
            "$ref": "#/definitions/portainer.TemplateEnv"
          }
        },
        "hostname": {
          "type": "string",
          "example": "mycontainer",
          "description": "Container hostname"
        },
        "id": {
          "type": "integer",
          "example": 1,
          "description": "Mandatory container/stack fields\nTemplate Identifier"
        },
        "image": {
          "type": "string",
          "example": "nginx:latest",
          "description": "Mandatory container fields\nImage associated to a container template. Mandatory for a container template"
        },
        "interactive": {
          "type": "boolean",
          "example": true,
          "description": "Whether the container should be started in\ninteractive mode (-i -t equivalent on the CLI)"
        },
        "labels": {
          "type": "array",
          "description": "Container labels",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "logo": {
          "type": "string",
          "example": "https://portainer.io/img/logo.svg",
          "description": "URL of the template's logo"
        },
        "name": {
          "type": "string",
          "example": "mystackname",
          "description": "Optional stack/container fields\nDefault name for the stack/container to be used on deployment"
        },
        "network": {
          "type": "string",
          "example": "mynet",
          "description": "Name of a network that will be used on container deployment if it exists inside the environment(endpoint)"
        },
        "note": {
          "type": "string",
          "example": "This is my <b>custom</b> template",
          "description": "A note that will be displayed in the UI. Supports HTML content"
        },
        "platform": {
          "type": "string",
          "example": "linux",
          "description": "Platform associated to the template.\nValid values are: 'linux', 'windows' or leave empty for multi-platform"
        },
        "ports": {
          "type": "array",
          "example": [
            "8080:80/tcp"
          ],
          "description": "A list of ports exposed by the container",
          "items": {
            "type": "string"
          }
        },
        "privileged": {
          "type": "boolean",
          "example": true,
          "description": "Whether the container should be started in privileged mode"
        },
        "registry": {
          "type": "string",
          "example": "quay.io",
          "description": "Optional container fields\nThe URL of a registry associated to the image for a container template"
        },
        "repository": {
          "description": "Mandatory stack fields",
          "$ref": "#/definitions/portainer.TemplateRepository"
        },
        "restart_policy": {
          "type": "string",
          "example": "on-failure",
          "description": "Container restart policy"
        },
        "stackFile": {
          "type": "string",
          "description": "Mandatory Edge stack fields\nStack file used for this template"
        },
        "title": {
          "type": "string",
          "example": "Nginx",
          "description": "Title of the template"
        },
        "type": {
          "type": "integer",
          "example": 1,
          "description": "Template type. Valid values are: 1 (container), 2 (Swarm stack), 3 (Compose stack), 4 (Compose edge stack)"
        },
        "volumes": {
          "type": "array",
          "description": "A list of volumes used during the container template deployment",
          "items": {
            "$ref": "#/definitions/portainer.TemplateVolume"
          }
        }
      }
    },
    "portainer.TemplateEnv": {
      "type": "object",
      "properties": {
        "default": {
          "type": "string",
          "example": "default_value",
          "description": "Default value that will be set for the variable"
        },
        "description": {
          "type": "string",
          "example": "MySQL root account password",
          "description": "Content of the tooltip that will be generated in the UI"
        },
        "label": {
          "type": "string",
          "example": "Root password",
          "description": "Text for the label that will be generated in the UI"
        },
        "name": {
          "type": "string",
          "example": "MYSQL_ROOT_PASSWORD",
          "description": "name of the environment(endpoint) variable"
        },
        "preset": {
          "type": "boolean",
          "example": false,
          "description": "If set to true, will not generate any input for this variable in the UI"
        },
        "select": {
          "type": "array",
          "description": "A list of name/value that will be used to generate a dropdown in the UI",
          "items": {
            "$ref": "#/definitions/portainer.TemplateEnvSelect"
          }
        }
      }
    },
    "portainer.TemplateEnvSelect": {
      "type": "object",
      "properties": {
        "default": {
          "type": "boolean",
          "example": false,
          "description": "Will set this choice as the default choice"
        },
        "text": {
          "type": "string",
          "example": "text value",
          "description": "Some text that will displayed as a choice"
        },
        "value": {
          "type": "string",
          "example": "value",
          "description": "A value that will be associated to the choice"
        }
      }
    },
    "portainer.TemplateRepository": {
      "type": "object",
      "properties": {
        "stackfile": {
          "type": "string",
          "example": "./subfolder/docker-compose.yml",
          "description": "Path to the stack file inside the git repository"
        },
        "url": {
          "type": "string",
          "example": "https://github.com/portainer/portainer-compose",
          "description": "URL of a git repository used to deploy a stack template. Mandatory for a Swarm/Compose stack template"
        }
      }
    },
    "portainer.TemplateVolume": {
      "type": "object",
      "properties": {
        "bind": {
          "type": "string",
          "example": "/tmp",
          "description": "Path on the host"
        },
        "container": {
          "type": "string",
          "example": "/data",
          "description": "Path inside the container"
        },
        "readonly": {
          "type": "boolean",
          "example": true,
          "description": "Whether the volume used should be readonly"
        }
      }
    },
    "portainer.User": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "User Identifier"
        },
        "Role": {
          "type": "integer",
          "example": 1,
          "description": "User role (1 for administrator account and 2 for regular account)"
        },
        "ThemeSettings": {
          "$ref": "#/definitions/portainer.UserThemeSettings"
        },
        "TokenIssueAt": {
          "type": "integer",
          "example": 1
        },
        "UseCache": {
          "type": "boolean",
          "example": true
        },
        "UserTheme": {
          "type": "string",
          "example": "dark",
          "description": "Deprecated"
        },
        "Username": {
          "type": "string",
          "example": "bob"
        },
        "endpointAuthorizations": {
          "description": "Deprecated in DBVersion == 25",
          "$ref": "#/definitions/portainer.EndpointAuthorizations"
        },
        "portainerAuthorizations": {
          "description": "Deprecated in DBVersion == 25",
          "$ref": "#/definitions/portainer.Authorizations"
        }
      }
    },
    "portainer.UserAccessPolicies": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/portainer.AccessPolicy"
      }
    },
    "portainer.UserResourceAccess": {
      "type": "object",
      "properties": {
        "AccessLevel": {
          "type": "integer"
        },
        "UserId": {
          "type": "integer",
          "description": "User identifier who created this template"
        }
      }
    },
    "portainer.UserThemeSettings": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "example": "dark",
          "description": "Color represents the color theme of the UI",
          "enum": [
            "dark",
            "light",
            "highcontrast",
            "auto"
          ]
        }
      }
    },
    "portainer.Webhook": {
      "type": "object",
      "properties": {
        "EndpointId": {
          "type": "integer",
          "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
        },
        "Id": {
          "type": "integer",
          "example": 1,
          "description": "Webhook Identifier"
        },
        "RegistryId": {
          "type": "integer",
          "description": "Registry Identifier"
        },
        "ResourceId": {
          "type": "string"
        },
        "Token": {
          "type": "string"
        },
        "Type": {
          "type": "integer",
          "description": "Type of webhook (1 - service)"
        }
      }
    },
    "registries.registryConfigurePayload": {
      "type": "object",
      "required": [
        "authentication"
      ],
      "properties": {
        "authentication": {
          "type": "boolean",
          "example": false,
          "description": "Is authentication against this registry enabled"
        },
        "password": {
          "type": "string",
          "example": "registry_password",
          "description": "Password used to authenticate against this registry. required when Authentication is true"
        },
        "region": {
          "type": "string",
          "description": "ECR region"
        },
        "tls": {
          "type": "boolean",
          "example": true,
          "description": "Use TLS"
        },
        "tlscacertFile": {
          "type": "array",
          "description": "The TLS CA certificate file",
          "items": {
            "type": "integer"
          }
        },
        "tlscertFile": {
          "type": "array",
          "description": "The TLS client certificate file",
          "items": {
            "type": "integer"
          }
        },
        "tlskeyFile": {
          "type": "array",
          "description": "The TLS client key file",
          "items": {
            "type": "integer"
          }
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "Skip the verification of the server TLS certificate"
        },
        "username": {
          "type": "string",
          "example": "registry_user",
          "description": "Username used to authenticate against this registry. Required when Authentication is true"
        }
      }
    },
    "registries.registryCreatePayload": {
      "type": "object",
      "required": [
        "authentication",
        "name",
        "type",
        "url"
      ],
      "properties": {
        "authentication": {
          "type": "boolean",
          "example": false,
          "description": "Is authentication against this registry enabled"
        },
        "baseURL": {
          "type": "string",
          "example": "registry.mydomain.tld:2375",
          "description": "BaseURL required for ProGet registry"
        },
        "ecr": {
          "description": "ECR specific details, required when type = 7",
          "$ref": "#/definitions/portainer.EcrData"
        },
        "gitlab": {
          "description": "Gitlab specific details, required when type = 4",
          "$ref": "#/definitions/portainer.GitlabRegistryData"
        },
        "name": {
          "type": "string",
          "example": "my-registry",
          "description": "Name that will be used to identify this registry"
        },
        "password": {
          "type": "string",
          "example": "registry_password",
          "description": "Password used to authenticate against this registry. required when Authentication is true"
        },
        "quay": {
          "description": "Quay specific details, required when type = 1",
          "$ref": "#/definitions/portainer.QuayRegistryData"
        },
        "type": {
          "type": "integer",
          "example": 1,
          "description": "Registry Type. Valid values are:\n\t1 (Quay.io),\n\t2 (Azure container registry),\n\t3 (custom registry),\n\t4 (Gitlab registry),\n\t5 (ProGet registry),\n\t6 (DockerHub)\n\t7 (ECR)"
        },
        "url": {
          "type": "string",
          "example": "registry.mydomain.tld:2375/feed",
          "description": "URL or IP address of the Docker registry"
        },
        "username": {
          "type": "string",
          "example": "registry_user",
          "description": "Username used to authenticate against this registry. Required when Authentication is true"
        }
      }
    },
    "registries.registryUpdatePayload": {
      "type": "object",
      "required": [
        "authentication",
        "name",
        "url"
      ],
      "properties": {
        "authentication": {
          "type": "boolean",
          "example": false,
          "description": "Is authentication against this registry enabled"
        },
        "baseURL": {
          "type": "string",
          "example": "registry.mydomain.tld:2375",
          "description": "BaseURL is used for quay registry"
        },
        "ecr": {
          "description": "ECR data",
          "$ref": "#/definitions/portainer.EcrData"
        },
        "name": {
          "type": "string",
          "example": "my-registry",
          "description": "Name that will be used to identify this registry"
        },
        "password": {
          "type": "string",
          "example": "registry_password",
          "description": "Password used to authenticate against this registry. required when Authentication is true"
        },
        "quay": {
          "description": "Quay data",
          "$ref": "#/definitions/portainer.QuayRegistryData"
        },
        "registryAccesses": {
          "description": "Registry access control",
          "$ref": "#/definitions/portainer.RegistryAccesses"
        },
        "url": {
          "type": "string",
          "example": "registry.mydomain.tld:2375",
          "description": "URL or IP address of the Docker registry"
        },
        "username": {
          "type": "string",
          "example": "registry_user",
          "description": "Username used to authenticate against this registry. Required when Authentication is true"
        }
      }
    },
    "release.Chart": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "description": "Files are miscellaneous files in a chart archive,\ne.g. README, LICENSE, etc.",
          "items": {
            "$ref": "#/definitions/release.File"
          }
        },
        "lock": {
          "description": "Lock is the contents of Chart.lock.",
          "$ref": "#/definitions/release.Lock"
        },
        "metadata": {
          "description": "Metadata is the contents of the Chartfile.",
          "$ref": "#/definitions/release.Metadata"
        },
        "schema": {
          "type": "array",
          "description": "Schema is an optional JSON schema for imposing structure on Values",
          "items": {
            "type": "integer"
          }
        },
        "templates": {
          "type": "array",
          "description": "Templates for this chart.",
          "items": {
            "$ref": "#/definitions/release.File"
          }
        },
        "values": {
          "type": "object",
          "description": "Values are default config for this chart.",
          "additionalProperties": true
        }
      }
    },
    "release.Dependency": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string",
          "description": "Alias usable alias to be used for the chart"
        },
        "condition": {
          "type": "string",
          "description": "A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )"
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled bool determines if chart should be loaded"
        },
        "import-values": {
          "type": "array",
          "description": "ImportValues holds the mapping of source values to parent key to be imported. Each item can be a\nstring or pair of child/parent sublist items.",
          "items": {}
        },
        "name": {
          "type": "string",
          "description": "Name is the name of the dependency.\n\nThis must mach the name in the dependency's Chart.yaml."
        },
        "repository": {
          "type": "string",
          "description": "The URL to the repository.\n\nAppending `index.yaml` to this string should result in a URL that can be\nused to fetch the repository index."
        },
        "tags": {
          "type": "array",
          "description": "Tags can be used to group charts for enabling/disabling together",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string",
          "description": "Version is the version (range) of this chart.\n\nA lock file will always produce a single version, while a dependency\nmay contain a semantic version range."
        }
      }
    },
    "release.File": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Data is the template as byte data.",
          "items": {
            "type": "integer"
          }
        },
        "name": {
          "type": "string",
          "description": "Name is the path-like name of the template."
        }
      }
    },
    "release.Hook": {
      "type": "object",
      "properties": {
        "delete_policies": {
          "type": "array",
          "description": "DeletePolicies are the policies that indicate when to delete the hook",
          "items": {
            "type": "string"
          }
        },
        "events": {
          "type": "array",
          "description": "Events are the events that this hook fires on.",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind is the Kubernetes kind."
        },
        "last_run": {
          "description": "LastRun indicates the date/time this was last run.",
          "$ref": "#/definitions/release.HookExecution"
        },
        "manifest": {
          "type": "string",
          "description": "Manifest is the manifest contents."
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string",
          "description": "Path is the chart-relative path to the template."
        },
        "weight": {
          "type": "integer",
          "description": "Weight indicates the sort order for execution among similar Hook type"
        }
      }
    },
    "release.HookExecution": {
      "type": "object",
      "properties": {
        "completed_at": {
          "type": "string",
          "description": "CompletedAt indicates the date/time this hook was completed."
        },
        "phase": {
          "type": "string",
          "description": "Phase indicates whether the hook completed successfully"
        },
        "started_at": {
          "type": "string",
          "description": "StartedAt indicates the date/time this hook was started"
        }
      }
    },
    "release.Lock": {
      "type": "object",
      "properties": {
        "dependencies": {
          "type": "array",
          "description": "Dependencies is the list of dependencies that this lock file has locked.",
          "items": {
            "$ref": "#/definitions/release.Dependency"
          }
        },
        "digest": {
          "type": "string",
          "description": "Digest is a hash of the dependencies in Chart.yaml."
        },
        "generated": {
          "type": "string",
          "description": "Generated is the date the lock file was last generated."
        }
      }
    },
    "release.Maintainer": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email is an optional email address to contact the named maintainer"
        },
        "name": {
          "type": "string",
          "description": "Name is a user name or organization name"
        },
        "url": {
          "type": "string",
          "description": "URL is an optional URL to an address for the named maintainer"
        }
      }
    },
    "release.Metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "description": "Annotations are additional mappings uninterpreted by Helm,\nmade available for inspection by other applications.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "apiVersion": {
          "type": "string",
          "description": "The API Version of this chart. Required."
        },
        "appVersion": {
          "type": "string",
          "description": "The version of the application enclosed inside of this chart."
        },
        "condition": {
          "type": "string",
          "description": "The condition to check to enable chart"
        },
        "dependencies": {
          "type": "array",
          "description": "Dependencies are a list of dependencies for a chart.",
          "items": {
            "$ref": "#/definitions/release.Dependency"
          }
        },
        "deprecated": {
          "type": "boolean",
          "description": "Whether or not this chart is deprecated"
        },
        "description": {
          "type": "string",
          "description": "A one-sentence description of the chart"
        },
        "home": {
          "type": "string",
          "description": "The URL to a relevant project page, git repo, or contact person"
        },
        "icon": {
          "type": "string",
          "description": "The URL to an icon file."
        },
        "keywords": {
          "type": "array",
          "description": "A list of string keywords",
          "items": {
            "type": "string"
          }
        },
        "kubeVersion": {
          "type": "string",
          "description": "KubeVersion is a SemVer constraint specifying the version of Kubernetes required."
        },
        "maintainers": {
          "type": "array",
          "description": "A list of name and URL/email address combinations for the maintainer(s)",
          "items": {
            "$ref": "#/definitions/release.Maintainer"
          }
        },
        "name": {
          "type": "string",
          "description": "The name of the chart. Required."
        },
        "sources": {
          "type": "array",
          "description": "Source is the URL to the source code of this chart",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "string",
          "description": "The tags to check to enable chart"
        },
        "type": {
          "type": "string",
          "description": "Specifies the chart type: application or library"
        },
        "version": {
          "type": "string",
          "description": "A SemVer 2 conformant version string of the chart. Required."
        }
      }
    },
    "release.Release": {
      "type": "object",
      "properties": {
        "chart": {
          "description": "Info provides information about a release\nInfo *Info `json:\"info,omitempty\"`\nChart is the chart that was released.",
          "$ref": "#/definitions/release.Chart"
        },
        "config": {
          "type": "object",
          "description": "Config is the set of extra Values added to the chart.\nThese values override the default values inside of the chart.",
          "additionalProperties": true
        },
        "hooks": {
          "type": "array",
          "description": "Hooks are all of the hooks declared for this release.",
          "items": {
            "$ref": "#/definitions/release.Hook"
          }
        },
        "manifest": {
          "type": "string",
          "description": "Manifest is the string representation of the rendered template."
        },
        "name": {
          "type": "string",
          "description": "Name is the name of the release"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace is the kubernetes namespace of the release."
        },
        "version": {
          "type": "integer",
          "description": "Version is an int which represents the revision of the release."
        }
      }
    },
    "release.ReleaseElement": {
      "type": "object",
      "properties": {
        "app_version": {
          "type": "string"
        },
        "chart": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        }
      }
    },
    "resource.Quantity": {
      "type": "object",
      "properties": {
        "Format": {
          "type": "string"
        }
      }
    },
    "resourcecontrols.resourceControlCreatePayload": {
      "type": "object",
      "required": [
        "resourceID",
        "type"
      ],
      "properties": {
        "administratorsOnly": {
          "type": "boolean",
          "example": true,
          "description": "Permit access to resource only to admins"
        },
        "public": {
          "type": "boolean",
          "example": true,
          "description": "Permit access to the associated resource to any user"
        },
        "resourceID": {
          "type": "string",
          "example": "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
        },
        "subResourceIDs": {
          "type": "array",
          "example": [
            "617c5f22bb9b023d6daab7cba43a57576f83492867bc767d1c59416b065e5f08"
          ],
          "description": "List of Docker resources that will inherit this access control",
          "items": {
            "type": "string"
          }
        },
        "teams": {
          "type": "array",
          "example": [
            56,
            7
          ],
          "description": "List of team identifiers with access to the associated resource",
          "items": {
            "type": "integer"
          }
        },
        "type": {
          "type": "integer",
          "example": 1,
          "description": "Type of Resource. Valid values are: 1 - container, 2 - service\n3 - volume, 4 - network, 5 - secret, 6 - stack, 7 - config, 8 - custom template, 9 - azure-container-group"
        },
        "users": {
          "type": "array",
          "example": [
            1,
            4
          ],
          "description": "List of user identifiers with access to the associated resource",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "resourcecontrols.resourceControlUpdatePayload": {
      "type": "object",
      "properties": {
        "administratorsOnly": {
          "type": "boolean",
          "example": true,
          "description": "Permit access to resource only to admins"
        },
        "public": {
          "type": "boolean",
          "example": true,
          "description": "Permit access to the associated resource to any user"
        },
        "teams": {
          "type": "array",
          "example": [
            7
          ],
          "description": "List of team identifiers with access to the associated resource",
          "items": {
            "type": "integer"
          }
        },
        "users": {
          "type": "array",
          "example": [
            4
          ],
          "description": "List of user identifiers with access to the associated resource",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "settings.publicSettingsResponse": {
      "type": "object",
      "properties": {
        "AuthenticationMethod": {
          "type": "integer",
          "example": 1,
          "description": "Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth"
        },
        "EnableEdgeComputeFeatures": {
          "type": "boolean",
          "example": true,
          "description": "Whether edge compute features are enabled"
        },
        "EnableTelemetry": {
          "type": "boolean",
          "example": true,
          "description": "Whether telemetry is enabled"
        },
        "Features": {
          "type": "object",
          "description": "Supported feature flags",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "GlobalDeploymentOptions": {
          "description": "Deployment options for encouraging deployment as code",
          "$ref": "#/definitions/portainer.GlobalDeploymentOptions"
        },
        "IsDockerDesktopExtension": {
          "type": "boolean",
          "example": false
        },
        "LogoURL": {
          "type": "string",
          "example": "https://mycompany.mydomain.tld/logo.png",
          "description": "URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string"
        },
        "OAuthLoginURI": {
          "type": "string",
          "example": "https://gitlab.com/oauth",
          "description": "The URL used for oauth login"
        },
        "OAuthLogoutURI": {
          "type": "string",
          "example": "https://gitlab.com/oauth/logout",
          "description": "The URL used for oauth logout"
        },
        "RequiredPasswordLength": {
          "type": "integer",
          "example": 1,
          "description": "The minimum required length for a password of any user when using internal auth mode"
        },
        "ShowKomposeBuildOption": {
          "type": "boolean",
          "example": false,
          "description": "Show the Kompose build option (discontinued in 2.18)"
        },
        "TeamSync": {
          "type": "boolean",
          "example": true,
          "description": "Whether team sync is enabled"
        },
        "edge": {
          "$ref": "settings.publicSettingsResponse_edge"
        },
        "isAMTEnabled": {
          "type": "boolean",
          "description": "Whether AMT is enabled"
        },
        "isFDOEnabled": {
          "type": "boolean",
          "description": "Whether FDO is enabled"
        },
        "kubeconfigExpiry": {
          "type": "string",
          "example": "24h",
          "description": "The expiry of a Kubeconfig",
          "default": "0"
        }
      }
    },
    "settings.settingsUpdatePayload": {
      "type": "object",
      "properties": {
        "EdgePortainerURL": {
          "type": "string",
          "description": "EdgePortainerURL is the URL that is exposed to edge agents"
        },
        "ShowKomposeBuildOption": {
          "type": "boolean",
          "example": false,
          "description": "Show the Kompose build option (discontinued in 2.18)"
        },
        "authenticationMethod": {
          "type": "integer",
          "example": 1,
          "description": "Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth"
        },
        "blackListedLabels": {
          "type": "array",
          "description": "A list of label name & value that will be used to hide containers when querying containers",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "edgeAgentCheckinInterval": {
          "type": "integer",
          "example": 5
        },
        "enableEdgeComputeFeatures": {
          "type": "boolean",
          "example": true,
          "description": "Whether edge compute features are enabled"
        },
        "enableTelemetry": {
          "type": "boolean",
          "example": false,
          "description": "Whether telemetry is enabled"
        },
        "enforceEdgeID": {
          "type": "boolean",
          "example": false,
          "description": "EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone"
        },
        "globalDeploymentOptions": {
          "description": "Deployment options for encouraging deployment as code",
          "$ref": "#/definitions/portainer.GlobalDeploymentOptions"
        },
        "helmRepositoryURL": {
          "type": "string",
          "example": "https://charts.bitnami.com/bitnami",
          "description": "Helm repository URL"
        },
        "internalAuthSettings": {
          "$ref": "#/definitions/portainer.InternalAuthSettings"
        },
        "kubeconfigExpiry": {
          "type": "string",
          "example": "24h",
          "description": "The expiry of a Kubeconfig",
          "default": "0"
        },
        "kubectlShellImage": {
          "type": "string",
          "example": "portainer/kubectl-shell:latest",
          "description": "Kubectl Shell Image"
        },
        "ldapsettings": {
          "$ref": "#/definitions/portainer.LDAPSettings"
        },
        "logoURL": {
          "type": "string",
          "example": "https://mycompany.mydomain.tld/logo.png",
          "description": "URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string"
        },
        "oauthSettings": {
          "$ref": "#/definitions/portainer.OAuthSettings"
        },
        "snapshotInterval": {
          "type": "string",
          "example": "5m",
          "description": "The interval in which environment(endpoint) snapshots are created"
        },
        "templatesURL": {
          "type": "string",
          "example": "https://raw.githubusercontent.com/portainer/templates/master/templates.json",
          "description": "URL to the templates that will be displayed in the UI when navigating to App Templates"
        },
        "trustOnFirstConnect": {
          "type": "boolean",
          "example": false,
          "description": "TrustOnFirstConnect makes Portainer accepting edge agent connection by default"
        },
        "userSessionTimeout": {
          "type": "string",
          "example": "5m",
          "description": "The duration of a user session"
        }
      }
    },
    "ssl.sslUpdatePayload": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "string",
          "description": "SSL Certificates"
        },
        "httpenabled": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "stacks.composeStackFromFileContentPayload": {
      "type": "object",
      "required": [
        "name",
        "stackFileContent"
      ],
      "properties": {
        "env": {
          "type": "array",
          "description": "A list of environment variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "fromAppTemplate": {
          "type": "boolean",
          "example": false,
          "description": "Whether the stack is from a app template"
        },
        "name": {
          "type": "string",
          "example": "myStack",
          "description": "Name of the stack"
        },
        "stackFileContent": {
          "type": "string",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "description": "Content of the Stack file"
        }
      }
    },
    "stacks.composeStackFromGitRepositoryPayload": {
      "type": "object",
      "required": [
        "name",
        "repositoryURL"
      ],
      "properties": {
        "additionalFiles": {
          "type": "array",
          "example": [
            "[nz.compose.yml",
            " uat.compose.yml]"
          ],
          "description": "Applicable when deploying with multiple stack files",
          "items": {
            "type": "string"
          }
        },
        "autoUpdate": {
          "description": "Optional GitOps update configuration",
          "$ref": "#/definitions/portainer.AutoUpdateSettings"
        },
        "composeFile": {
          "type": "string",
          "example": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "default": "docker-compose.yml"
        },
        "env": {
          "type": "array",
          "description": "A list of environment variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "fromAppTemplate": {
          "type": "boolean",
          "example": false,
          "description": "Whether the stack is from a app template"
        },
        "name": {
          "type": "string",
          "example": "myStack",
          "description": "Name of the stack"
        },
        "repositoryAuthentication": {
          "type": "boolean",
          "example": true,
          "description": "Use basic authentication to clone the Git repository"
        },
        "repositoryPassword": {
          "type": "string",
          "example": "myGitPassword",
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true."
        },
        "repositoryReferenceName": {
          "type": "string",
          "example": "refs/heads/master",
          "description": "Reference name of a Git repository hosting the Stack file"
        },
        "repositoryURL": {
          "type": "string",
          "example": "https://github.com/openfaas/faas",
          "description": "URL of a Git repository hosting the Stack file"
        },
        "repositoryUsername": {
          "type": "string",
          "example": "myGitUsername",
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true."
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository"
        }
      }
    },
    "stacks.kubernetesGitDeploymentPayload": {
      "type": "object",
      "properties": {
        "additionalFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "autoUpdate": {
          "$ref": "#/definitions/portainer.AutoUpdateSettings"
        },
        "composeFormat": {
          "type": "boolean"
        },
        "manifestFile": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "repositoryAuthentication": {
          "type": "boolean"
        },
        "repositoryPassword": {
          "type": "string"
        },
        "repositoryReferenceName": {
          "type": "string"
        },
        "repositoryURL": {
          "type": "string"
        },
        "repositoryUsername": {
          "type": "string"
        },
        "stackName": {
          "type": "string"
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository"
        }
      }
    },
    "stacks.kubernetesManifestURLDeploymentPayload": {
      "type": "object",
      "properties": {
        "composeFormat": {
          "type": "boolean"
        },
        "manifestURL": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "stackName": {
          "type": "string"
        }
      }
    },
    "stacks.kubernetesStringDeploymentPayload": {
      "type": "object",
      "properties": {
        "composeFormat": {
          "type": "boolean"
        },
        "fromAppTemplate": {
          "type": "boolean",
          "example": false,
          "description": "Whether the stack is from a app template"
        },
        "namespace": {
          "type": "string"
        },
        "stackFileContent": {
          "type": "string"
        },
        "stackName": {
          "type": "string"
        }
      }
    },
    "stacks.stackFileResponse": {
      "type": "object",
      "properties": {
        "StackFileContent": {
          "type": "string",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "description": "Content of the Stack file"
        }
      }
    },
    "stacks.stackGitRedployPayload": {
      "type": "object",
      "properties": {
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "prune": {
          "type": "boolean"
        },
        "pullImage": {
          "type": "boolean",
          "example": false,
          "description": "Force a pulling to current image with the original tag though the image is already the latest"
        },
        "repositoryAuthentication": {
          "type": "boolean"
        },
        "repositoryPassword": {
          "type": "string"
        },
        "repositoryReferenceName": {
          "type": "string"
        },
        "repositoryUsername": {
          "type": "string"
        },
        "stackName": {
          "type": "string"
        }
      }
    },
    "stacks.stackGitUpdatePayload": {
      "type": "object",
      "properties": {
        "autoUpdate": {
          "$ref": "#/definitions/portainer.AutoUpdateSettings"
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "prune": {
          "type": "boolean"
        },
        "repositoryAuthentication": {
          "type": "boolean"
        },
        "repositoryPassword": {
          "type": "string"
        },
        "repositoryReferenceName": {
          "type": "string"
        },
        "repositoryUsername": {
          "type": "string"
        },
        "tlsskipVerify": {
          "type": "boolean"
        }
      }
    },
    "stacks.stackMigratePayload": {
      "type": "object",
      "required": [
        "endpointID"
      ],
      "properties": {
        "endpointID": {
          "type": "integer",
          "example": 2,
          "description": "Environment(Endpoint) identifier of the target environment(endpoint) where the stack will be relocated"
        },
        "name": {
          "type": "string",
          "example": "new-stack",
          "description": "If provided will rename the migrated stack"
        },
        "swarmID": {
          "type": "string",
          "example": "jpofkc0i9uo9wtx1zesuk649w",
          "description": "Swarm cluster identifier, must match the identifier of the cluster where the stack will be relocated"
        }
      }
    },
    "stacks.swarmStackFromFileContentPayload": {
      "type": "object",
      "required": [
        "name",
        "stackFileContent",
        "swarmID"
      ],
      "properties": {
        "env": {
          "type": "array",
          "description": "A list of environment variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "fromAppTemplate": {
          "type": "boolean",
          "example": false,
          "description": "Whether the stack is from a app template"
        },
        "name": {
          "type": "string",
          "example": "myStack",
          "description": "Name of the stack"
        },
        "stackFileContent": {
          "type": "string",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "description": "Content of the Stack file"
        },
        "swarmID": {
          "type": "string",
          "example": "jpofkc0i9uo9wtx1zesuk649w",
          "description": "Swarm cluster identifier"
        }
      }
    },
    "stacks.swarmStackFromGitRepositoryPayload": {
      "type": "object",
      "required": [
        "name",
        "repositoryURL",
        "swarmID"
      ],
      "properties": {
        "additionalFiles": {
          "type": "array",
          "example": [
            "[nz.compose.yml",
            " uat.compose.yml]"
          ],
          "description": "Applicable when deploying with multiple stack files",
          "items": {
            "type": "string"
          }
        },
        "autoUpdate": {
          "description": "Optional GitOps update configuration",
          "$ref": "#/definitions/portainer.AutoUpdateSettings"
        },
        "composeFile": {
          "type": "string",
          "example": "docker-compose.yml",
          "description": "Path to the Stack file inside the Git repository",
          "default": "docker-compose.yml"
        },
        "env": {
          "type": "array",
          "description": "A list of environment variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "fromAppTemplate": {
          "type": "boolean",
          "example": false,
          "description": "Whether the stack is from a app template"
        },
        "name": {
          "type": "string",
          "example": "myStack",
          "description": "Name of the stack"
        },
        "repositoryAuthentication": {
          "type": "boolean",
          "example": true,
          "description": "Use basic authentication to clone the Git repository"
        },
        "repositoryPassword": {
          "type": "string",
          "example": "myGitPassword",
          "description": "Password used in basic authentication. Required when RepositoryAuthentication is true."
        },
        "repositoryReferenceName": {
          "type": "string",
          "example": "refs/heads/master",
          "description": "Reference name of a Git repository hosting the Stack file"
        },
        "repositoryURL": {
          "type": "string",
          "example": "https://github.com/openfaas/faas",
          "description": "URL of a Git repository hosting the Stack file"
        },
        "repositoryUsername": {
          "type": "string",
          "example": "myGitUsername",
          "description": "Username used in basic authentication. Required when RepositoryAuthentication is true."
        },
        "swarmID": {
          "type": "string",
          "example": "jpofkc0i9uo9wtx1zesuk649w",
          "description": "Swarm cluster identifier"
        },
        "tlsskipVerify": {
          "type": "boolean",
          "example": false,
          "description": "TLSSkipVerify skips SSL verification when cloning the Git repository"
        }
      }
    },
    "stacks.updateSwarmStackPayload": {
      "type": "object",
      "properties": {
        "env": {
          "type": "array",
          "description": "A list of environment(endpoint) variables used during stack deployment",
          "items": {
            "$ref": "#/definitions/portainer.Pair"
          }
        },
        "prune": {
          "type": "boolean",
          "example": true,
          "description": "Prune services that are no longer referenced (only available for Swarm stacks)"
        },
        "pullImage": {
          "type": "boolean",
          "example": false,
          "description": "Force a pulling to current image with the original tag though the image is already the latest"
        },
        "stackFileContent": {
          "type": "string",
          "example": "version: 3\n services:\n web:\n image:nginx",
          "description": "New content of the Stack file"
        }
      }
    },
    "swarm.ServiceUpdateResponse": {
      "type": "object",
      "properties": {
        "Warnings": {
          "type": "array",
          "description": "Optional warning messages",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "system.BuildInfo": {
      "type": "object",
      "properties": {
        "buildNumber": {
          "type": "string"
        },
        "env": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gitCommit": {
          "type": "string"
        },
        "goVersion": {
          "type": "string"
        },
        "imageTag": {
          "type": "string"
        },
        "nodejsVersion": {
          "type": "string"
        },
        "webpackVersion": {
          "type": "string"
        },
        "yarnVersion": {
          "type": "string"
        }
      }
    },
    "system.nodesCountResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "integer"
        }
      }
    },
    "system.status": {
      "type": "object",
      "properties": {
        "Version": {
          "type": "string",
          "example": "2.0.0",
          "description": "Portainer API version"
        },
        "demoEnvironment": {
          "$ref": "#/definitions/demo.EnvironmentDetails"
        },
        "instanceID": {
          "type": "string",
          "example": "299ab403-70a8-4c05-92f7-bf7a994d50df",
          "description": "Server Instance ID"
        }
      }
    },
    "system.systemInfoResponse": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "integer"
        },
        "edgeAgents": {
          "type": "integer"
        },
        "platform": {
          "type": "string"
        }
      }
    },
    "system.versionResponse": {
      "type": "object",
      "properties": {
        "LatestVersion": {
          "type": "string",
          "example": "2.0.0",
          "description": "The latest version available"
        },
        "ServerEdition": {
          "type": "string",
          "example": "CE/EE"
        },
        "UpdateAvailable": {
          "type": "boolean",
          "example": false,
          "description": "Whether portainer has an update available"
        },
        "build": {
          "$ref": "#/definitions/system.BuildInfo"
        },
        "databaseVersion": {
          "type": "string"
        },
        "serverVersion": {
          "type": "string"
        }
      }
    },
    "tags.tagCreatePayload": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "org/acme"
        }
      }
    },
    "teammemberships.teamMembershipCreatePayload": {
      "type": "object",
      "required": [
        "role",
        "teamID",
        "userID"
      ],
      "properties": {
        "role": {
          "type": "integer",
          "example": 1,
          "description": "Role for the user inside the team (1 for leader and 2 for regular member)"
        },
        "teamID": {
          "type": "integer",
          "example": 1,
          "description": "Team identifier"
        },
        "userID": {
          "type": "integer",
          "example": 1,
          "description": "User identifier"
        }
      }
    },
    "teammemberships.teamMembershipUpdatePayload": {
      "type": "object",
      "required": [
        "role",
        "teamID",
        "userID"
      ],
      "properties": {
        "role": {
          "type": "integer",
          "example": 1,
          "description": "Role for the user inside the team (1 for leader and 2 for regular member)"
        },
        "teamID": {
          "type": "integer",
          "example": 1,
          "description": "Team identifier"
        },
        "userID": {
          "type": "integer",
          "example": 1,
          "description": "User identifier"
        }
      }
    },
    "teams.teamCreatePayload": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "developers",
          "description": "Name"
        },
        "teamLeaders": {
          "type": "array",
          "example": [
            3,
            5
          ],
          "description": "TeamLeaders",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "User Identifier"
          }
        }
      }
    },
    "teams.teamUpdatePayload": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "developers",
          "description": "Name"
        }
      }
    },
    "templates.filePayload": {
      "type": "object",
      "required": [
        "composeFilePathInRepository",
        "repositoryURL"
      ],
      "properties": {
        "composeFilePathInRepository": {
          "type": "string",
          "example": "./subfolder/docker-compose.yml",
          "description": "Path to the file inside the git repository"
        },
        "repositoryURL": {
          "type": "string",
          "example": "https://github.com/portainer/portainer-compose",
          "description": "URL of a git repository where the file is stored"
        }
      }
    },
    "templates.fileResponse": {
      "type": "object",
      "properties": {
        "fileContent": {
          "type": "string",
          "example": "version:2",
          "description": "The requested file content"
        }
      }
    },
    "templates.listResponse": {
      "type": "object",
      "properties": {
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.Template"
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "users.accessTokenResponse": {
      "type": "object",
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/portainer.APIKey"
        },
        "rawAPIKey": {
          "type": "string"
        }
      }
    },
    "users.addHelmRepoUrlPayload": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "users.adminInitPayload": {
      "type": "object",
      "required": [
        "password",
        "username"
      ],
      "properties": {
        "password": {
          "type": "string",
          "example": "admin-password",
          "description": "Password for the admin user"
        },
        "username": {
          "type": "string",
          "example": "admin",
          "description": "Username for the admin user"
        }
      }
    },
    "users.helmUserRepositoryResponse": {
      "type": "object",
      "properties": {
        "GlobalRepository": {
          "type": "string"
        },
        "UserRepositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/portainer.HelmUserRepository"
          }
        }
      }
    },
    "users.themePayload": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "example": "dark",
          "description": "Color represents the color theme of the UI",
          "enum": [
            "dark",
            "light",
            "highcontrast",
            "auto"
          ]
        }
      }
    },
    "users.userAccessTokenCreatePayload": {
      "type": "object",
      "required": [
        "description",
        "password"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "github-api-key"
        },
        "password": {
          "type": "string",
          "example": "password"
        }
      }
    },
    "users.userCreatePayload": {
      "type": "object",
      "required": [
        "password",
        "role",
        "username"
      ],
      "properties": {
        "password": {
          "type": "string",
          "example": "cg9Wgky3"
        },
        "role": {
          "type": "integer",
          "example": 2,
          "description": "User role (1 for administrator account and 2 for regular account)"
        },
        "username": {
          "type": "string",
          "example": "bob"
        }
      }
    },
    "users.userUpdatePasswordPayload": {
      "type": "object",
      "required": [
        "newPassword",
        "password"
      ],
      "properties": {
        "newPassword": {
          "type": "string",
          "example": "new_passwd",
          "description": "New Password"
        },
        "password": {
          "type": "string",
          "example": "passwd",
          "description": "Current Password"
        }
      }
    },
    "users.userUpdatePayload": {
      "type": "object",
      "required": [
        "newPassword",
        "password",
        "role",
        "useCache",
        "username"
      ],
      "properties": {
        "newPassword": {
          "type": "string",
          "example": "asfj2emv"
        },
        "password": {
          "type": "string",
          "example": "cg9Wgky3"
        },
        "role": {
          "type": "integer",
          "example": 2,
          "description": "User role (1 for administrator account and 2 for regular account)"
        },
        "theme": {
          "$ref": "#/definitions/users.themePayload"
        },
        "useCache": {
          "type": "boolean",
          "example": true
        },
        "username": {
          "type": "string",
          "example": "bob"
        }
      }
    },
    "v1.Duration": {
      "type": "object",
      "properties": {
        "time.Duration": {
          "type": "integer"
        }
      }
    },
    "v1.FieldsV1": {
      "type": "object"
    },
    "v1.ManagedFieldsEntry": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted."
        },
        "fieldsType": {
          "type": "string",
          "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\""
        },
        "fieldsV1": {
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional",
          "$ref": "#/definitions/v1.FieldsV1"
        },
        "manager": {
          "type": "string",
          "description": "Manager is an identifier of the workflow managing these fields."
        },
        "operation": {
          "type": "string",
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'."
        },
        "subresource": {
          "type": "string",
          "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource."
        },
        "time": {
          "type": "string",
          "description": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional"
        }
      }
    },
    "v1.OwnerReference": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "API version of the referent."
        },
        "blockOwnerDeletion": {
          "type": "boolean",
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional"
        },
        "controller": {
          "type": "boolean",
          "description": "If true, this reference points to the managing controller.\n+optional"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        },
        "name": {
          "type": "string",
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names"
        },
        "uid": {
          "type": "string",
          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids"
        }
      }
    },
    "v1.ResourceList": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/resource.Quantity"
      }
    },
    "v1beta1.ContainerMetrics": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Container name corresponding to the one from pod.spec.containers."
        },
        "usage": {
          "description": "The memory usage is the memory working set.",
          "$ref": "#/definitions/v1.ResourceList"
        }
      }
    },
    "v1beta1.NodeMetrics": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
          "additionalProperties": {
            "type": "string"
          }
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional"
        },
        "creationTimestamp": {
          "type": "string",
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional"
        },
        "deletionGracePeriodSeconds": {
          "type": "integer",
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional"
        },
        "deletionTimestamp": {
          "type": "string",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional"
        },
        "finalizers": {
          "type": "array",
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "items": {
            "type": "string"
          }
        },
        "generateName": {
          "type": "string",
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional"
        },
        "generation": {
          "type": "integer",
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
        },
        "labels": {
          "type": "object",
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "type": "array",
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          }
        },
        "name": {
          "type": "string",
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional"
        },
        "ownerReferences": {
          "type": "array",
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          }
        },
        "resourceVersion": {
          "type": "string",
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
        },
        "selfLink": {
          "type": "string",
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional"
        },
        "timestamp": {
          "type": "string",
          "description": "The following fields define time interval from which metrics were\ncollected from the interval [Timestamp-Window, Timestamp]."
        },
        "uid": {
          "type": "string",
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional"
        },
        "usage": {
          "description": "The memory usage is the memory working set.",
          "$ref": "#/definitions/v1.ResourceList"
        },
        "window": {
          "$ref": "#/definitions/v1.Duration"
        }
      }
    },
    "v1beta1.NodeMetricsList": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional"
        },
        "continue": {
          "type": "string",
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage."
        },
        "items": {
          "type": "array",
          "description": "List of node metrics.",
          "items": {
            "$ref": "#/definitions/v1beta1.NodeMetrics"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
        },
        "remainingItemCount": {
          "type": "integer",
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional"
        },
        "resourceVersion": {
          "type": "string",
          "description": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
        },
        "selfLink": {
          "type": "string",
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional"
        }
      }
    },
    "v1beta1.PodMetrics": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
          "additionalProperties": {
            "type": "string"
          }
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional"
        },
        "containers": {
          "type": "array",
          "description": "Metrics for all containers are collected within the same time window.",
          "items": {
            "$ref": "#/definitions/v1beta1.ContainerMetrics"
          }
        },
        "creationTimestamp": {
          "type": "string",
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional"
        },
        "deletionGracePeriodSeconds": {
          "type": "integer",
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional"
        },
        "deletionTimestamp": {
          "type": "string",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional"
        },
        "finalizers": {
          "type": "array",
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "items": {
            "type": "string"
          }
        },
        "generateName": {
          "type": "string",
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional"
        },
        "generation": {
          "type": "integer",
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
        },
        "labels": {
          "type": "object",
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "type": "array",
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          }
        },
        "name": {
          "type": "string",
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional"
        },
        "ownerReferences": {
          "type": "array",
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          }
        },
        "resourceVersion": {
          "type": "string",
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
        },
        "selfLink": {
          "type": "string",
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional"
        },
        "timestamp": {
          "type": "string",
          "description": "The following fields define time interval from which metrics were\ncollected from the interval [Timestamp-Window, Timestamp]."
        },
        "uid": {
          "type": "string",
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional"
        },
        "window": {
          "$ref": "#/definitions/v1.Duration"
        }
      }
    },
    "v1beta1.PodMetricsList": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional"
        },
        "continue": {
          "type": "string",
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage."
        },
        "items": {
          "type": "array",
          "description": "List of pod metrics.",
          "items": {
            "$ref": "#/definitions/v1beta1.PodMetrics"
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
        },
        "remainingItemCount": {
          "type": "integer",
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional"
        },
        "resourceVersion": {
          "type": "string",
          "description": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
        },
        "selfLink": {
          "type": "string",
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional"
        }
      }
    },
    "webhooks.webhookCreatePayload": {
      "type": "object",
      "properties": {
        "endpointID": {
          "type": "integer",
          "example": 1,
          "description": "Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment"
        },
        "registryID": {
          "type": "integer",
          "example": 1,
          "description": "Registry Identifier"
        },
        "resourceID": {
          "type": "string"
        },
        "webhookType": {
          "type": "integer",
          "description": "Type of webhook (1 - service)"
        }
      }
    },
    "webhooks.webhookUpdatePayload": {
      "type": "object",
      "properties": {
        "registryID": {
          "type": "integer",
          "description": "Registry Identifier"
        }
      }
    },
    "endpoints.endpointUpdateRelationsPayload_relations": {
      "type": "object",
      "properties": {
        "edgeGroups": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "EdgeGroup Identifier"
          }
        },
        "group": {
          "type": "integer",
          "example": 1,
          "description": "Environment(Endpoint) group identifier"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": 1,
            "description": "Tag identifier"
          }
        }
      }
    },
    "portainer.Endpoint_agent": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "example": "1.0.0"
        }
      }
    },
    "portainer.Settings_edge": {
      "type": "object",
      "properties": {
        "CommandInterval": {
          "type": "integer",
          "example": 5,
          "description": "The command list interval for edge agent - used in edge async mode (in seconds)"
        },
        "PingInterval": {
          "type": "integer",
          "example": 5,
          "description": "The ping interval for edge agent - used in edge async mode (in seconds)"
        },
        "SnapshotInterval": {
          "type": "integer",
          "example": 5,
          "description": "The snapshot interval for edge agent - used in edge async mode (in seconds)"
        },
        "asyncMode": {
          "type": "boolean",
          "description": "Deprecated 2.18"
        }
      }
    },
    "settings.publicSettingsResponse_edge": {
      "type": "object",
      "properties": {
        "CommandInterval": {
          "type": "integer",
          "example": 60,
          "description": "The command list interval for edge agent - used in edge async mode [seconds]"
        },
        "PingInterval": {
          "type": "integer",
          "example": 60,
          "description": "The ping interval for edge agent - used in edge async mode [seconds]"
        },
        "SnapshotInterval": {
          "type": "integer",
          "example": 60,
          "description": "The snapshot interval for edge agent - used in edge async mode [seconds]"
        },
        "checkinInterval": {
          "type": "integer",
          "example": 60,
          "description": "The check in interval for edge agent (in seconds) - used in non async mode [seconds]"
        }
      }
    }
  }
}